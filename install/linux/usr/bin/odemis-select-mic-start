#!/bin/bash
: '
This script is used when there are multiple modular configurations available for METEOR.
It is recommended to combine it with the Exec= command of the Odemis.desktop file.
Example -> Exec=bash -c "/usr/bin/odemis-select-mic-start /usr/share/odemis/*meteor-main*.yaml"
However it could be used stand-alone if it is required.
The syntax to run this script -> odemis-select-mic-start [target_files].
The script is typically used for parsing configuration (.yaml) files which contain a "Microscope" class.
Using this class microscope names are extracted and placed in a list.
This list is presented to the user in the form of a (zenity) selection dialog window.
After selection of the microscope configuration the right (yaml) file will be used to start Odemis.
'
# Default values for options
select_version=false
confirm_laser=false
target_files=()

# Function to display help information
display_help() {
    echo
    echo "Syntax: odemis-select-mic-start [options] [target_files]"
    echo "Options:"
    echo "  --help                  Display this help message."
    echo "  --select-version        Show prompt for selection of Odemis version."
    echo "  --confirm-laser         Show a confirmation dialog if the user selects a file ending with a wavelength (eg, 432nm)."
    echo "  target_files            A series of configuration files from a specific location."
    echo "                          (e.g. /usr/share/odemis/sim/*meteor-main*.yaml)."
    exit 0
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            display_help
            exit 0
            ;;
        --select-version)
            select_version=true
            ;;
        --confirm-laser)
            confirm_laser=true
            ;;
        --*)
            echo "Warning: Unkown option: $1, ignoring."
            display_help
            ;;
        *)
            if [ -z "$1" ]; then
                echo "Error: No valid target files provided"
                display_help
                exit 1
            fi
            target_files+=("$1")
            ;;
    esac
    shift
done

odemis-cli --check
status=$?

if [ "$select_version" = true ]; then
    # Navigate to odemis repository
    REPO_PATH="$HOME/development/odemis"
    if [[ ! -d $REPO_PATH ]]; then
        echo "ERROR: Odemis development folder cannot be found on the system ($REPO_PATH)."
        exit 1
    fi
    cd "$REPO_PATH" || exit

    # Prompt for selecting branch
    user_choice=$(zenity --list --title="Select Odemis Version" \
        --text="Please select which Odemis version to use:" \
        --radiolist \
        --column "Select" --column "Version" \
        FALSE "Latest Development Changes" \
        FALSE "Latest Release" \
        TRUE "Current Branch" \
        --width=400 --height=250)

    if [ "$user_choice" == "Latest Development Changes" ]; then
        git fetch origin
        git checkout master
        git pull origin master
    elif [ "$user_choice" == "Latest Release" ]; then
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        git fetch origin
        git checkout "$latest_tag"
        git pull origin "$latest_tag"
    elif [ "$user_choice" == "Current Branch" ]; then
        :  # Leave current branch as is
    else
        zenity --error --text="No valid selection made. Exiting."
        exit 1
    fi
fi

# check if the backend is already running or starting up
if [ $status == 0 ] || [ $status == 3 ] ; then
    # extract the running microscope file
    mic_name="$(odemis list --machine | head -1 | cut -d $'\t' -f 1)"
    reply=$(zenity --info --title="Odemis backend already running" \
        --text "Restart with new backend or start GUI only\n\nactive: $mic_name" \
        --ok-label="Cancel" \
        --extra-button="Restart" \
        --extra-button="GUI only" \
        --width=300 --height=100)
    if [ "$reply" == "Restart" ]; then
        echo "Trying to stop the backend"
        sudo odemis-stop
    elif [ "$reply" == "GUI only" ]; then
        echo "Trying to start the GUI"
        odemis-gui
        exit
    else
        exit
    fi
fi

mic_list=()
error_filenames=()
mkdir $HOME/.local/share/odemis/log 2>/dev/null
parse_logfile=$HOME/.local/share/odemis/log/odemis-select-mic-start-parse.log
> $parse_logfile

process_file() {
    local fn="$1"

    # Add a new header to the logfile
    printf "$(date) Parsing file: $fn\n" >> "$parse_logfile"

    # Extract the microscope name and role using a small Python script
mic_name=$(python3 <<EOF 2>>"$parse_logfile"
import sys
import yaml
from odemis.odemisd import modelgen

f = open('$fn')
d = yaml.load(f, modelgen.SafeLoader)
mic_name = next(n for n, d in d.items() if d.get('class') == 'Microscope')
print(mic_name)
EOF
    )

    mic_list+=("$fn")  # The dialog has a hidden column, which is the filepath

    if test "$mic_name" == ""; then
        # save the file name in the error list
        error_filenames+=("$(basename ${fn})")
        mic_name=">>ERROR parsing $(basename ${fn})"
        # add a newline to the logfile
        echo "" >> $parse_logfile
    fi

    mic_list+=("$mic_name")
}

total_files=${#target_files[@]}
current_file=0

# Processing a large selection of microscope files can take quite a while,
# so giving visual feedback of the progress gives the user clarity
# that the script is still running. Using file descriptor so we are
# still able to append to mic_list.
exec 3> >(zenity --progress \
           --title="Progress" \
           --text="Analysing microscope configurations..." \
           --percentage=0 \
           --auto-close \
           --auto-kill)


for fn in "${target_files[@]}"; do
    process_file "$fn"
    current_file=$((current_file + 1))
    # Calculate the progress percentage
    progress=$((current_file * 100 / total_files))
    # Update the progress bar
    echo "$progress" >&3
done

# Close the file descriptor
exec 3>&-

# Prompt the user with a list of microscope configurations to choose from
selection="$(zenity --list --title="Odemis configuration starter" \
    --list --text "Please select a configuration to start:" \
    --column "" --column "" "${mic_list[@]}" --hide-header \
    --width=300 --height=400 \
    --hide-column 1 --print-column=1 2>/dev/null)"

if test "$selection" == ""; then
    exit
fi

# if one of the microscope names is selected which also contains an error, show the log file and stop the script
for efn in "${error_filenames[@]}"; do
    if test "$efn" == "$(basename ${selection})"; then
        gedit $parse_logfile
        exit
    fi
done

# If it is going to start a microscope file with a laser, ask the user to confirm
if [ "$confirm_laser" = true ]; then
    if [[ "$(basename ${selection})" =~ ([1-9][0-9][0-9]nm) ]]; then
        laser="${BASH_REMATCH[1]}"
        zenity --question \
        --title="Odemis configuration starter" \
        --text "Are you sure the filter cube is for the <b>$laser</b> laser?\n\nUsing the wrong filter cube may damage the detectors." \
        --ok-label "Start" \
        --cancel-label "Cancel" || exit
    fi
fi

odemis-start "$selection"

