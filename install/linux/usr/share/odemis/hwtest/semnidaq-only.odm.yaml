# Configuration to use the ETD of a SEM
SEM: {
    class: Microscope,
    role: sem,
}

# Quanta SEM driven via external X/Y connection, using a DAQ board
"SEM ExtXY": {
    class: semnidaq.AnalogSEM,
    role: null,
    init: {device: "Dev1"},  # see nilsdev
    # more detectors can be added, if necessary
    children: {
        scanner: "SEM E-beam",
        detector0: "SE Detector",
        # detector1: "Back-Scatter Detector",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # e-beam control, and scanner
    role: e-beam,
    init: {
        channels: [1, 0],
        # On Delmic scanning box v2, the voltage is x2, so need to specify twice smaller values than needed.
        limits: [[-2.8, 2.8], [4.0, -4.0]],  # V
        park: [-3.0, -4.5], # V
        max_res: [6144, 4096],  # px, to force the same ratio as the SEM (~8/7)
        settle_time: 100.e-6,  # s
        scan_active_delay: 0.01,  # s, time to wait before starting a new acquisition
        hfw_nomag: 0.4,  # m
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {
            4: [True, True, null],
            2: [True, True, "external"],  # High when scanning, High when VA set to True
            3: [False, True, "blanker"],  # Low when scanning, High when VA set to True
        },
        pixel_ttl: [0],
        line_ttl: [1],
        frame_ttl: [6],
    },
    properties: {
        scale: [4, 4], # (ratio) : start with a pretty fast scan
        dwellTime: 5.e-6, # s
        magnification: 5000, # (ratio)
    },
    affects: ["SE Detector", "Back-Scatter Detector"],
}

# Must be connected on AI 0/AI GND
"SE Detector": { # aka ETD
    role: se-detector,
    init: {
        # Can also use "ao0" and "ao1" to loopback from the AO0/1, for testing
        channel: 1,
        limits: [5, -5] # V
    },
}

## Must be connected on AI 1/AI GND
#"Back-Scatter Detector": { # aka Backscatter
#    role: bs-detector,
#    init: {
#        channel: 2,
#        limits: [-5, 5] # V
#    },
#}

"Perfect Stage": {
    class: simulated.Stage,
    role: stage,
    init: {axes: [x, y]},
    affects: ["SEM E-beam"],
    properties: {
        speed: {x: 0.1, y: 0.1} #m/s
    }
}
