ENZEL: {
    class: Microscope,
    role: cryo-secom,
    children: [
        "Sample Thermostat", "Cooler Controller",
        "SEM E-beam Full", "SEM Detector Full",
        "SEM Detector", "EBeam Scanner",
        "EBeam Focus", "EBeam Detector",
        "Light Source", "Filter Wheel", "Stigmator",
        "Camera", "Optical Objective",
        "5DOF Stage", "Stage Global",
        "Objective Aligner", "Optical Focus",
    ],
}


# Lakeshore 335, which controls the temperature
"Sample Thermostat": {
    class: lakeshore.Lakeshore,
    role: sample-thermostat,
    init: {
        # TODO: udev rule for a dedicated tty
#        port: "/dev/ttyUSB*",
        port: "/dev/fake",  # For simulator
        sensor_input: "B",
        output_channel: 2,
    },
}

# Cyrolab
"Cooler Controller": {
    # TODO: No driver for Cyrolab, so using lakeshore simulator for now
    class: lakeshore.Lakeshore,
    role: cooler,
    init: {
        port: "/dev/fake",  # For simulator
        sensor_input: "B",
        output_channel: 1,
    },
}

# Merges the scan interface e-beam and the e-beam control (via API)
"SEM E-beam Full": {
    class: scanner.CompositedScanner,
    role: e-beam,
    affects: ["SEM Detector", "Camera"], # affects the CCD in case of cathodoluminescence
    dependencies: {
        external: "SEM E-beam",
        internal: "EBeam Scanner"
    },
    init: {},
    properties: {
        scale: [8, 8],#  (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
    },
}

# Merges the analog and digital detectors (xt_client one and the one from the DAQ board)
"SEM Detector Full": {
    class: scanner.CompositedDetector,
    role: se-detector,
    affects: ["SEM Detector", "Camera"],
    dependencies: {
        external: "SEM Detector",
        internal: "EBeam Detector",
        comp_scanner: "SEM E-beam Full",
    },
    init: {},
}

# Analog connection to the SEM, using a DAQ board, for controlling the beam position and receiving the ETD signal.
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
    },
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {
        channels: [1, 0],
        # On Delmic scanning box v2, the voltage is x2, so need to specify twice smaller values than needed.
        #max_res: [4096, 4096], # px
        limits: [[1.8, -1.8], [1.8, -1.8]],  # V
        park: [-2, -2], # V
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {4: True}, # output ports -> True (indicate scanning) or False (indicate parked)
        settle_time: 10.e-6, # s
        hfw_nomag: 0.2293, # m, must be the same as in EBeam control
    },
}

# Must be connected on AI1/AI9 (differential)
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: null,
    affects: ["Camera"],
    init: {
        channel: 1,
        limits: [-3, 3], # V
    },
}

# TFS SEM API control, via the XT adapter (running on the SEM PC or the Support PC)
"SEM XT connection": {
    class: xt_client.SEM,
    role: null,
    init: {
        address: "PYRO:Microscope@145.94.39.217:4242",
    },
    children: {
        scanner: "EBeam Scanner",
        fib-scanner: "Fib Scanner",
        focus: "EBeam Focus",
        detector: "EBeam Detector",
    },
}

"Fib Scanner": {
    # Internal child of "SEM XT connection", so no class
    role: "ion-beam",
    init: {
    },
}


"EBeam Scanner": {
    # Internal child of "SEM XT connection", so no class
    role:  null,
    init: {
        hfw_nomag: 0.2293,  # Must be the same as in SEM E-beam
    },
}

"EBeam Detector": {
  role: se-detector-ion,
}

## Not used, just to make the SimSEM happy
#"SED via API": {
#    # Internal child of SimSEM, so no class
#    role: null,
#    init: {},
#}

"EBeam Focus": {
    # Internal child of "SEM XT connection", so no class
    role: ebeam-focus,
#    affects: ["SEM Detector"],
}

"Light Source": {
    class: lle.LLE,
#    class: lle.FakeLLE,  # For simulator
    role: light,
    affects: ["Camera"],
    init: {
        port: "/dev/ttyUSB*",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are from vendor: http://lumencor.com/products/filters-for-spectra-x-light-engines/
        sources: {"UV": [379.e-9, 384.e-9, 390.e-9, 396.e-9, 401.e-9], # 390/22
                  "cyan": [472.e-9, 479.e-9, 485.e-9, 491.e-9, 497.e-9], # 485/25
                  "green": [544.e-9, 552.e-9, 560.e-9, 568.e-9, 576.e-9], # 560/32
                  "red": [638.e-9, 643.e-9, 648.e-9, 653.e-9, 658.e-9], # 648/20
                 }
        },
    # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    affects: ["Camera"],
    init: {
        mag: 100.0, # ratio, (actually of the complete light path)
        na: 0.85, # ratio, numerical aperture
        ri: 1.0, # ratio, refractive index
    },
}

# Controller for the filter-wheel + stigmator
# DIP must be configured with address 7 (= 0000111)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    init: {
        port: "/dev/ttyTMCM*",
        address: 1, # TODO 7
        axes: ["fw", "stig"],
        ustepsize: [1.227184e-6, 41.4995608e-6], # rad/µstep
        rng: [[-7, 14], [-7, 14]], # rad
        unit: ["rad", "rad"],
        refproc: "Standard",
        refswitch: {"fw": 0, "stig": 0},
        #inverted: ["stig"],  # to make positive moves go the opposite direction
    },
}

"Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: filter,
    affects: ["Camera"],
    dependencies: {"band": "Optical Actuators"},
    init: {
        axis_name: "fw",
        # TODO: a way to indicate the best filter to use during alignement?
        # It supports 4 filters
        positions: {
            # pos (rad) -> m,m
             3.488111735: [300.e-9, 700.e-9], # no filter
             4.040437151: [420.e-9, 460.e-9], # FF01-440/40-25
             4.686208974: [510.e-9, 540.e-9], # FF01-525/30-25
             5.471607137: [589.e-9, 625.e-9], # FF01-607/36-25
             6.117378960: [672.e-9, 696.e-9], # FF02-684/24-25
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
}

"Stigmator": {
    class: actuator.RotationActuator,
    role: stigmator,
    affects: ["Camera"],
    children: {"rz": "Optical Actuators"},
    init: {
        axis_name: "stig",
        cycle: 6.283185, # rad
        # ref_start: null, # rad, value to where start the referencing, default is to start at 5% of cycle
        ref_frequency: null, # Disable auto referencing. Use a number (eg 5) to automatically refence after N moves
    },
    metadata: {
        # TODO: calibrate
        POS_COR: 0.0 #1.6286889 -1.8559488 or 1.9768688 # rad, adjustment needed for 0 = no astigmatism
    },
}

"Camera": { # for Zyla
    class: andorcam3.AndorCam3,
    role: ccd,
    init: {
        device: 0, # the only Andor camera connected so always 0
        transp: [-1, 2],
    },
    properties: {
        exposureTime: 0.3, # s
        # targetTemperature: -40, # °C
        #resolution: [2048, 2048], #crop camera image
    },
}

"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: ["Camera"],
    children: {"z": "5DOF Stage"},
    init: {
        axes_map: {"z": "z"}
    },
    metadata: {
      FAV_POS_ACTIVE: { 'z': 0.0 }
    },
    persistent: {
      metadata: [ FAV_POS_ACTIVE ],  # Store "good focus" position between run
    },
}

# Special component to only provide the X/Y axis of the optical lens to align it with the e-beam lens
"Objective Aligner": {
  class: actuator.MultiplexActuator,
  role: align,
  affects: ["Camera"],
  dependencies: { "x": "3DOF Stage", "y": "Tilted 3DOF YZ", "z": "Tilted 3DOF YZ" },
  init: {
    axes_map: {"x": "x", "y": "x", "z":"y"},
    # TODO: If the X/Y axes are not aligned with the image axis, swap the axes in the
    # mapping here + use "inverted", if it's just a matter of 90° rotation. If the
    # angle is not such a multiple, use ConverterStage.
    #        inverted: ["x"]
    },
  metadata: {
#     Default position at init corresponding to (approximately) aligned
#     It must have both x,y and z.
# TODO K.K. currently the metadata which is used is on the 3DOF stage. This should be on the objective aligner to simplify the accessing of the metadata.
# TODO K.K. Furthermore the metadata FAV_POS_ALIGN seems to be unused and neither Daan nor Kornee now the need for this option/position.
# Since in both alignment and imaging position the 5DOF is really close to both the pole piece and the 3DOF no really safe place exict. There is an argument
# For lowering before alignment (further away from the pole piece) but also one from putting it higher (further away from the 3DOF which might heat the sample
# and can be damaged). Maybe the best choice is in the middle (imaging position). This needs to be checked with both Caspar, Bassim, Marre and Daan.
     FAV_POS_ACTIVE: {'x': -0.002151752407, 'y': 0.0001652431180230012, 'z': 0.0018668802080731735},  # Helios 20211011
     FAV_POS_ALIGN: {'x': -0.002151752407, 'y': 0.0001652431180230012, 'z': 0.0008668802080731735},
#     "Safe" position to go to so that the 5DoF stage cannot hit the objective lens.
#     It must have both x and y. It should be at least 0.1 mm away from ACTIVE
#     Note: most like, these values should be the same as for 3DOF Stage.
     FAV_POS_DEACTIVE: {'x': -0.009999903294, 'y': -0.0033636692695348737, 'z': -0.008584012723297806},  # Helios 20210201
  },
}

# Special component to provide control of the 5DOF in a global reference frame (works only with rx = 28 degrees)
"Stage Global": {
  class: actuator.MultiplexActuator,
  role: stage-global,
  affects: [ "Camera",],
  dependencies: { "x": "5DOF Stage", "y": "Stage YZ Global", "z": "Stage YZ Global" },
  init: {
    axes_map: { "x": "x", "y": "x", "z": "y" },
  }
}

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they have opposite direction than convention
# (so the stage "position" is the current position observed)
"5DOF Stage": {
    class: smaract.MC_5DOF,
    role: stage,
    affects: ["Camera", "EBeam Scanner", "SEM E-beam"],
    init: {
        locator: "network:sn:MCS2-00001602",
#        locator: "fake",  # For simulator
        ref_on_init: False, # TODO: needs to happen *after* the optical stage has been referenced and moved down
        hold_time: 1,  # s, default = infinite (.inf)
        linear_speed: 0.002,  # m/s, 20200203 was 0.003
        rotary_speed: 0.087,  # rad/s = 5 deg/s
        pos_deactive_after_ref: False,  # Set to True to automatically go to DEACTIVE position after succesful referencing
        # TODO: check the ranges
        axes: {
            'x': {
                range: [-1.6e-2, 1.6e-2],
                unit: 'm',
            },
            'y': {
                range: [-1.5e-2, 1.5e-2],
                unit: 'm',
            },
            'z': {
                range: [-1.e-2, 0.002],
                unit: 'm',
            },
            'rx': {
                range: [-0.49, 0.49],
                unit: 'rad',
            },
            'rz': {
                range: [-0.49, 0.49],
                unit: 'rad',
            },
        },
    },
    metadata: {
        # Center of rotation for rx, so that tilting the stage shows the same center in FIB and SEM/FM.
        # Note that the origin is arbitrarily hard-coded in the controller.
        # Current values are correct for Helios FIB SEM
        PIVOT_POS: {
            # Default values:
            'x': -0.10, # X has no effect, but the controller wants a value
            'y': -0.007370275587860,
            'z': 0.039136292,
        },
        FAV_POS_DEACTIVE: { 'x': 0.01500, 'y': 0.000163, 'z': 0.00059618, 'rx': 0.0, 'rz': 0.0 },
        FAV_POS_ACTIVE: { 'x': 0.0004687162409,  'y': -0.001742328132, 'z': 0.0011254317082, 'rx': -0.488738324, 'rz': 0.0 },

        POS_ACTIVE_RANGE: { 'x': [ -23.e-6, 23.e-6 ], 'y': [ -33.e-6, 33.e-6 ], 'z': [ -0.003, 0.0 ], } ,
        OVERVIEW_RANGE: { 'x': [ 0, 3.2448e-05 ], 'y': [ 0, 4.34304e-05 ] } ,
        # Initial position to start alignment from
        FAV_POS_ALIGN: { 'x': 0.0004687162409,  'y': -0.001742328132, 'z': 0.0011254317082, 'rx': -0.488738324, 'rz': 0.0 },
        # Initial position when going to FM/SEM imaging.
        # It should be within the ACTIVE_RANGE
        # SEM Imaging position
        FAV_POS_SEM_IMAGING: { 'x': 0.0004687162409,  'y': -0.001742328132, 'z': 0.0011254317082, 'rx': -0.0, 'rz': 0.0 },
        # GIS coating position
        FAV_POS_COATING: { 'rx': 0.4363, 'rz': 0.0, 'x': 0.01, 'y': 0.001, 'z': 0.00 },
        ION_BEAM_TO_SAMPLE_ANGLE: -0.6632 # rad, 38°
    },
}

# Provides control of the stage in a global reference frame for the axis Y and Z when the stage is tilted
"Stage YZ Global": {
  class: actuator.ConvertStage,
  role: null,
  dependencies: {
    "under": "5DOF Stage"
  },
  init: {
    axes: [ "y", "z" ], # name of the axes in the dependency, mapped to x,y (if identity transformation)
    # TODO: Check the correct angle sign
    rotation: 0.4887, # rad , 28°
  },
}

# Y/Z axes only, as X is as-is
"Tilted 3DOF YZ": {
  class: actuator.ConvertStage,
  role: null,
  dependencies: {
    "under": "3DOF Stage"
  },
  init: {
    axes: [ "y", "z" ], # name of the axes in the dependency, mapped to x,y (if identity transformation)
    rotation: -0.4887, # rad , -28°
  },
  affects: [ "Camera" ],
}

"3DOF Stage": {
    class: smaract.MCS2,
    role:  null,
    init: {
        locator: "network:sn:MCS2-00001604",
#        locator: "fake",  # For simulator
        ref_on_init: True,
        speed: 0.002,  # m/s
        accel: 0.002,  # m/s²
        hold_time: 1,  # s, default = infinite (.inf)
        pos_deactive_after_ref: True,  # Automatically go to safe position after succesful referencing
        axes: {
            'x': {
                range: [-0.0114001, 0.0112466],
                unit: 'm',
                channel: 0,
            },
            'y': {
                range: [-0.0111003, 0.0111334],
                unit: 'm',
                channel: 2,
            },
            'z': {
                # When Z is inverted, the range will be inverted too, as this describes the
                # the range as seen by the device. IOW, expect to read the opposite values when
                # using odemis --list-prop.
                range: [-0.0126437, 0.0075529],
                unit: 'm',
                channel: 1,
            },
        },
        inverted: ["z"],
    },
    metadata: {
     # Default position at init corresponding to (approximately) aligned
     # It must have both x,y and z.
     FAV_POS_ACTIVE: {'x': -0.002151738894, 'y': 0.00102245366, 'z': 0.001570705107},  # Helios 20211011
     FAV_POS_ALIGN: {'x': -0.002151738894, 'y': 0.00102245366, 'z': 0.00057},
     # "Safe" position to go to so that the 5DoF stage cannot hit the objective lens.
     # It must have both x and y. It should be at least 0.1 mm away from ACTIVE
     # Note: most like, these values should be the same as for 3DOF Stage.
     FAV_POS_DEACTIVE: { 'x': -0.010, 'y': -0.010, 'z': -6.e-3 },  # Helios 20210201
    },
}