# Configuration for a SPARC system with 5 detectors:
# * ETD (from SEM)
# * AR CCD
# * Analog CL PMT
# * Spectrometer CCD
# * Monochromator counting PMT
"SPARC 2 PMTs": {
    class: Microscope,
    role: sparc,
    children: ["SEM E-beam", "Focus Lens", "Optical Emission Filter",
    "SEM Detector", "Angular Camera", "Spectrometer", "Monochromator",
    "Fiber Flipper", "Mirror Actuators", "Focus Lens Flipper", 
    "AR CCD-PMT Flipper", "Spec CCD-PMT Flipper", "Fiber Actuators", 
    "CL Detector"],
}


# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "CL PMT",
       counter0: "Monochromator PMT",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        max_res: [5448, 4096], # 4:3 ratio
        settle_time: 5.e-6, # s
        hfw_nomag: 0.2553, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Spectrometer", "Angular Camera"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 0/AI GND
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3], # V
    },
}

# CL PMT: composed of the control unit + the PMT output connected to the DAQ board

# Must be connected on AI 1/AI GND
"CL PMT": { # the raw detector of the PMT
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {
        channel: 1, # 0-> sawtooth waves, 1-> square waves
        limits: [3, 0], # V, with contrast reversed
    },
}

"CL PMT control unit": {
    class: pmtctrl.PMTControl,
    role: null,
    init: {
        port: "/dev/fake", # for simulator
        prot_time: 0.0001,  # s
        prot_curr: 50.e-6,  # A
        relay_cycle: 5, # s
        powered: ["Fiber Flipper", "Focus Lens Flipper", "AR CCD-PMT Flipper"]
    }
}

"CL Detector": {
    class: pmtctrl.PMT,
    role: cl-detector,
    init: {
        settle_time: 1.0,  # s, time for the gain to be fully active
    },
    dependencies: {
       "detector": "CL PMT",
       "pmt-control": "CL PMT control unit",
    },
}


# The real PMT is a counting PMT connected to PFI 8
"Monochromator PMT": { # the raw detector of the counting PMT for monochromator
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {
        source: 8,  # PFI number
    },
}

# Just to turn off automatically the PMT when it's not in use
"Monochromator": {
    class: pmtctrl.PMT,
    role: monochromator,
    dependencies: {
       "detector": "Monochromator PMT",
       "pmt-control": "Spectrograph",
    },
}

"Focus Lens": {
    class: static.OpticalLens,
    role: lens,
    # Big mirror config
    init: {
       mag: 0.405826, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
    },
    # Small mirror config
#     init: {
#        mag: 0.4017, # ratio
#        na: 0.2, # ratio, numerical aperture
#        ri: 1.0, # ratio, refractive index
#        pole_pos: [256, 183], # (px, px), position of the pole (aka the hole in the mirror)
#        x_max: 3.55e-3,  # m, the distance between the parabola origin and the cutoff position
#        hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
#        focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
#        parabola_f: 0.8e-3,  # m, parabola_parameter=1/4f
#     },
    affects: ["Angular Camera"]
}

# Thorlabs MFF102 holding the lens
# The convention for the position is:
# 0° (1)  -> no lens
# 90° (2) -> lens
"Focus Lens Flipper": {
    class: tlaptmf.MFF,
    role: lens-switch,
    power_supplier: "CL PMT control unit",
    init: {port: "/dev/fake", # for simulator
           #sn: "37857195",
           axis: "rx",
           inverted: ["rx"],
           positions: [[0, "on"], [1.5707963267948966, "off"]],
    },
    affects: ["Angular Camera", "Spectrometer", "Monochromator"],
}

# Thorlabs FW102C with some filters
"Optical Emission Filter": {
    class: tlfw.FakeFW102c,
    role: filter,
    init: {port: "/dev/ttyFTDI*", # will automatically find the right port
           bands: {1: [420.e-9, 460.e-9], # pos -> m,m
                   2: [500.e-9, 550.e-9],
                   3: "polariser",
                   6: "pass-through"},
           },
    affects: ["Angular Camera", "Spectrometer", "CL Detector", "Monochromator"],
}

# Andor Zyla
#"Angular Camera": {
#    class: andorcam3.AndorCam3,
#    role: ccd,
#    init: {
#        device: 0,  # if a real camera is plugged in, it's usually 0
#        transp: [-1, 2], # mirrored on X axis
#    },
#    properties: {
#        fanSpeed: 0.0, # 0 = Off, 0.5= half speed, 1 = max speed
#    }
#}

"Angular Camera": {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {
        device: "fake",
        image: "sparc-ar-mirror-align.h5", # only for simulator
        #image: "small_mirror_image_sim_pxs.tif", # only for small mirror test
        #transp: [1, -2],
    },
}

# Thorlabs MFF102 holding the mirror to select AR CCD or AR PMT
# The convention for the position is:
# 0° (1)  -> AR CCD
# 90° (2) -> AR PMT
"AR CCD-PMT Flipper": {
    class: tlaptmf.MFF,
    role: ar-det-selector,
    power_supplier: "CL PMT control unit",
    init: {port: "/dev/fake", # for simulator
           #sn: "37857191",
           axis: "rx",
           # inverted: ["rx"],
           positions: [[0, "on"], [1.5707963267948966, "off"]],
    },
    affects: ["Angular Camera", "CL Detector"]
}


# Thorlabs MFF102 holding the mirror to select AR or spectrometer
# The convention for the position is:
# 0° (1)  -> AR
# 90° (2) -> spectrometer
"Fiber Flipper": {
    class: tlaptmf.MFF,
    role: ar-spec-selector,
    power_supplier: "CL PMT control unit",
    init: {port: "/dev/fake", # for simulator
           #sn: "37857201",
           axis: "rx",
           # inverted: ["rx"],
           positions: [[0, "on"], [1.5707963267948966, "off"]],
    },
    affects: ["Angular Camera", "Spectrometer"]  
}

# Spectrometer = Andor iVac 316 + Shamrock SR303i (connected via USB)
"Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    dependencies: {detector: "Spectral Camera", spectrograph: "Spectrograph"},
    properties: {
        binning: [4, 64],
    },
}

"Spectral Camera": {
    class: andorcam2.AndorCam2,
    role: sp-ccd,
    init: {
       device: "fake",
       transp: [-1, 2], # mirrored on X axis
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

"Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    dependencies: {"ccd": "Spectral Camera"},
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
                3: "slit-monochromator", # OUTPUT_SIDE
        },
        accessory: "slitleds", # TTL output to off when leds might be on 
    },
    affects: ["Monochromator", "Spectral Camera", "Spectrometer"],
}

# Provide the mirror of the spectrograph as a separate component
"Spec CCD-PMT Flipper": {
    class: actuator.MultiplexActuator,
    role: spec-det-selector,
    dependencies: {"rx": "Spectrograph"},
    init: {
        axes_map: {"rx": "flip-out"},
    },
    affects: ["Monochromator", "Spectral Camera", "Spectrometer"],
}

# PI E-861 over IP (can be static IP, or via DCHP)
"Mirror Actuators": {
    class: pigcs.FakeBus,
    role: mirror,
    init: {
        port: "/dev/ttyPIGCS",
        # X/Y are same axes as SEM
        # yaw/pitch are axes according to Mirror's orientation
        # rz = yaw, ry = pitch (from Mirror's point of view)
        # axis -> controller, channel, closed-loop?
        axes: {"x":  [1, 1, False],
               "y":  [2, 1, False],
               "ry": [3, 1, False],
               "rz": [4, 1, False]},
        # inverted: ["y", "ry"],
        #dist_to_steps: {"x": 100000, "y": 100000}, # step/m
    },
    properties: {
    #    speed: {"x": 0.01, "y": 0.01, "rz": 0.01, "ry": 0.01} # m/s
    }
}

# New Focus 8742, configured to use network connection with DCHP
# X axis as motor 1
# Y axis as motor 2
"Fiber Actuators": {
    class: nfpm.PM8742,
    role: fiber-aligner,
    init: {
        address: "fake", # put the IP address if static IP is used, or "autoip"
        sn: "11511",
        # X/Y are wrt light path (from the sample to the detector)
        axes: ["x", "y"],
        # inverted: ["y",],
        stepsize: [33.e-9, 33.e-9] # m/step
    },
}
