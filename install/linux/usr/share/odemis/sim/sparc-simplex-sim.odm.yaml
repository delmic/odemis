# Configuration for the SPARC 'simplex': no alignment in software
"SPARC Simplex": {
    class: Microscope,
    role: sparc-simplex,  # same as sparc, but no alignment supported in GUI
    children: ["SEM E-beam", "SEM Detector", "Spectrometer", "Spectrograph focus",
               "PMT", "EBIC", "Spec CCD Flipper"],
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "PMT",
       detector2: "EBIC",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [0, 1],
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        settle_time: 20.e-6, # s
        hfw_nomag: 0.276, # m
        max_res: [4096, 3072], # px, to force 4:3 ratio
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Spectrometer", "PMT", "EBIC"] # affects every detector
}

# ETD detectors: I do not really know the actual voltage from the SEM:s. On the 250 we use a Keithley 427 as a filter and that gives a signal of 0 to -10V. With inverted contrast so that White is -10V. I have not checked the signal out from the 440. I will try that this week.

# Must be connected on AI 1/AI 9 (differential)
"SEM Detector": {
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 1, # 0-> sawtooth waves, 1-> square waves
        limits: [0, -10] # V (inverted contrast)
    },
}

# PMT: can either be an analog PMT, or a counting PMT connected via a converter
# pulse -> voltage. Connected on the second output port of the spectrograph.
# The PMT/Keithleys: The signal is normally 0 to 10 V. For the LN2-cooled PMTs, we have a dark current that we correct for and the zero level can be negative as well as positive.
# The photon counter has a a pre amplifier and a photon counter/discriminator and generates TTL pulses. I will try to have a look at the counter itself.

# Must be connected on AI 0/AI 8 (differential)
"PMT": {
    # Internal child of SEM Scan Interface, so no class
    role: monochromator, # TODO: use cl-detector if you want fast dwell time & full scanning in live view
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-10, 10], # V
    },
}

# EBIC: In either configuration, the signal is either ±10V or ±5V. As the signal can be positive and negative, is uses the full range.
# Must be connected on AI 2/AI 10 (differential)
"EBIC": {
    # Internal child of SEM Scan Interface, so no class
    role: ebic-detector,
    init: {
        channel: 2,
        limits: [-10, 10], # V
    },
}

# Spectrometer = Andor Newton DU920P + Shamrock SR193 (connected via USB)
"Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    dependencies: {detector: "Spectral Camera", spectrograph: "Spectrograph"},
    properties: {
        binning: [4, 100],
    },
}

# From spec: 1024 x 255
"Spectral Camera": {
    class: andorcam2.AndorCam2,
    role: sp-ccd,
    init: {
       device: "fake",
       transp: [1, 2], # if mirrored on X axis put -1
       image: "sparc-spec-sim.h5",
    },
    properties: {
        targetTemperature: -80, # °C
    },
}

"Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    init: {
        device: "fake",
        # The input and output slits are manual
        fstepsize: 10.9e-6, # m, size of one focus step
    },
    affects: ["Spectrometer", "Spectral Camera", "PMT"],
}

# Selects between CCD and PMT
# Provide the mirror (aka port selector) of the spectrograph as a separate component
"Spec CCD Flipper": {
    class: actuator.MultiplexActuator,
    role: "spec-det-selector",
    dependencies: {"rx": "Spectrograph"},
    init: {
        axes_map: {"rx": "flip-out"},
    },
    affects: ["Spectrometer", "Spectral Camera", "PMT"],
}

# The spectrograph remembers the focus position per grating, so it typically doesn't
# need to be changed after calibration.
"Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: "focus",
    dependencies: {"z": "Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["Spectrometer", "Spectral Camera", "PMT"],
}

