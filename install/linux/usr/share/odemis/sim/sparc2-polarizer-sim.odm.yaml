# Configuration for a simulated SPARCv2 system with polarization analyzer
"SPARCv2 polarizer": {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector", "Calibration Light",
               "Optical Path Properties", "Spectrometer 1",
               "Camera", "Spectrometer 2",
               "Spec Filter Wheel", "Spec CCD Flipper", "Spectrograph focus",
               "Mirror Actuators", "Mirror Actuators in XY referential",
               "Slit", "Lens1 Mover", "Lens2 Switch",
               "Polarization Analyzer", "Linear Polarizer", "Quarter Wave Plate"],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: light.Light,
    role: "brightlight",
    power_supplier: "Power Control Unit",
    affects: ["Camera", "Spectrometer 1", "Spectrometer 2"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
        port: "/dev/fake", # for simulator
        pin_map: {"Calibration Light": 0, #"CL PMT control unit": 3,
                  "Camera": 4, "Spectral Camera": 5, "Spectrograph": 6,
                  "Optical Actuators": 2},
        delay: { # Time it takes before a component is accessible
            "Calibration Light": 0, # To turn on/off the light, it's immediate
            "Camera": 3,
            "Spectral Camera": 3,
            "Spectrograph": 5,
            "Optical Actuators": 1
        },
        init: { # Which component to power on from the very beginning (to save time)
            "Camera": True,
            "Spectral Camera": True,
            "Spectrograph": True,
            "Optical Actuators": True
        },
    }
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: "e-beam",
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        settle_time: 5.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Spectrometer 2", "Camera"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 0/AI GND
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

# In reality, this is a Zyla, but you need libandor3-dev to simulate an AndorCam3
# Depending exactly on the configuration, it might also be used for spectrometer
"Camera": {
    class: simcam.Camera,
    role: "ccd",
    power_supplier: "Power Control Unit",
    init: {
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

"Spectrometer 1": {
    class: spectrometer.CompositedSpectrometer,
    role: "spectrometer-integrated",
    dependencies: {detector: "Camera", spectrograph: "Spectrograph"},
    init: {
        transp: [1, -2], # only applied to the spectrometer data (not raw CCD)
    },
}

# On some configuration, there is a dedicated camera for the acquisition of the
# spectra, otherwise 'Camera' is used.
"Spectral Camera": {
    class: andorcam2.AndorCam2,
    role: "sp-ccd",
    power_supplier: "Power Control Unit",
    init: {
       device: "fake",
       transp: [-1, 2], # if mirrored on X axis
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

"Spectrometer 2": {
    class: spectrometer.CompositedSpectrometer,
    role: "spectrometer",
    dependencies: {detector: "Spectral Camera", spectrograph: "Spectrograph"},
    properties: {
        binning: [4, 16],
    },
}

"Spectrograph": {
    class: andorshrk.Shamrock,
    role: "spectrograph",
    power_supplier: "Power Control Unit",
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
        bands: { # The filters in the filter-wheel
            1: [320.e-9, 400.e-9], # pos -> m,m
            2: [500.e-9, 550.e-9],
            3: [400.e-9, 450.e-9],
            6: "pass-through"
        },
        fstepsize: 10.9e-6, # m, size of one focus step
    },
    affects: ["Camera", "Spectrometer 1", "Spectral Camera", "Spectrometer 2"],
}

"Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: "focus",
    dependencies: {"z": "Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["Camera", "Spectrometer 1", "Spectral Camera", "Spectrometer 2"],
}

# Provide the mirror (aka port selector) of the spectrograph as a separate component
"Spec CCD Flipper": {
    class: actuator.FixedPositionsActuator,
    role: "spec-det-selector",
    dependencies: {"rx": "Spectrograph"},
    init: {
        axis_name: "flip-out",
        positions: {
            0: ["Camera", "Spectrometer 1"],
            1.5707963267948966: ["Spectral Camera", "Spectrometer 2"],
        },
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer 1", "Spectrometer 2"],
}

# Provide the filter wheel of the spectrograph as a separate component
"Spec Filter Wheel": {
    class: actuator.MultiplexActuator,
    role: "filter",
    dependencies: {"band": "Spectrograph"},
    init: {
        axes_map: {"band": "band"},
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer 1", "Spectrometer 2"],
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: "lens",
    # Standard mirror config
    init: {
       mag: 0.4, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter of the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
       rotation: -1.570796326795, # rad, 90° rotation between optical axis and SEM Y axis
    },
    affects: ["Camera", "Spectrometer 1", "Spectral Camera", "Spectrometer 2"]
}

# Controller for the motors moving the various parts of the optical box
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["qwp", "linear", "l1", "l2", "slit"],
        unit: ["rad", "rad", "m", "m", "m"],
        # These values are adapted to make the simulator roughly the same speed
        ustepsize: [3.392e-5, 3.392e-5, 25.1e-9, 25.1e-9, 5.e-9], # [rad/µstep, rad/µstep, m/µstep, m/µstep, m/µstep]
        refproc: "Standard",
        refswitch: {"qwp": 0, "linear": 0, "l1": 4, "l2": 4},
        inverted: ["l2", "qwp"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        FAV_POS_ACTIVE: {"x": 0.0045} # m
    },
    affects: ["Lens2 Switch"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            4.e-3: "on",
            0.02: "off", # completely out of the path
        },
    },
    affects: ["Camera", "Spectrometer 1", "Spectral Camera", "Spectrometer 2"],
}

# Control the slit position to either fully-open or small (dependent on the spectrometer slit-in)
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: "slit-in-big",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "slit",
        positions: {
            0: "on", # fully opened
            -0.0012: "off", # opening based on the small slit
        },
    },
    affects: ["Camera", "Spectrometer 1", "Spectral Camera", "Spectrometer 2"],
}

# Controller for moving the 'Redux' stage
# Note: the S axis can _only_ be moved when the l axis is near the active/engaged position
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["s", "l"],
        ustepsize: [1.e-6, 1.e-6], # m/µstep (big, for the simulator to move fast)
        refproc: "Standard",
        refswitch: {"s": 0, "l": 0},
    },
    metadata: {
        # Default position of the mirror engaged (will be improved during alignment)
        FAV_POS_ACTIVE: {"l": 70.e-3, "s": 5.e-3},  # m, m
    },
}

# Internal component to convert between the referential of the mirror actuators
# and the X/Y referential of the SEM. Used by the mirror alignment functions.
"Mirror Actuators in XY referential": {
    class: actuator.ConvertStage,
    role: "mirror-xy",
    dependencies: {"orig": "Mirror Actuators"},
    init: {
        axes: ["l", "s"], # mapped respectively to X, Y
        rotation: -1.0471975511965976, # rad (= 60°)
        # Note: if you want to use absolute moves, add a "translation" too
    },
}

"Polarization Analyzer": {
    class: actuator.CombinedFixedPositionActuator,
    role: "pol-analyzer",
    dependencies: {"Pol1": "Quarter Wave Plate", "Pol2": "Linear Polarizer"}, # alphabetically sorted
    init: {
        axis_name: "pol",
        caxes_map: ["rz", "rz"],
        atol: [3.392e-5, 3.392e-5], # rad (~the step size of the motor)
        cycle: [6.283185307179586, 6.283185307179586],  # rad (equals one rotation of motor)
        fallback: "unspecified",
        # It supports 7 positions
        # position names are hardcoded in odemis, so do not change!
        positions: {
                   # [qwp, linear]
                   # pos (str) -> list(pos (float), pos (float))
                   "horizontal": [0.0, 0.0],
                   "vertical": [1.570796, 1.570796],  # (pi/2, pi/2)
                   "posdiag": [0.785398, 0.785398],  # (pi/4, pi/4)
                   "negdiag": [2.356194, 2.356194],  # (3pi/4, 3pi/4)
                   "rhc": [0.0, 0.785398],  # (0, pi/4)
                   "lhc": [0.0, 2.356194],  # (0, 3pi/4)
                   "pass-through": [1.6, 1.6],  # 91.67 degree: choose something close to vertical
                                                # as it will fit most real samples best
        },
    },
    affects: ["Lens1 Mover", "Camera", "Spectral Camera"],
}

"Linear Polarizer": {
    class: actuator.RotationActuator,
    role: "lin-pol",
    dependencies: {"rz": "Optical Actuators"},
    init: {
        axis_name: "linear",
    },
    metadata: {
        POS_COR: -1.63  # rad (transmission axis horizontal + mounting offset)
    },
    affects: ["Camera", "Spectral Camera"]
}

"Quarter Wave Plate": {
    class: actuator.RotationActuator,
    role: "quarter-wave-plate",
    dependencies: {"rz": "Optical Actuators"},
    init: {
        axis_name: "qwp",
        ref_start: 6.1  # if axis inverted (see Optical Actuators) use ref_start close to cycle (e.g. 95% of 2pi)
    },
    metadata: {
        POS_COR: -1.48  # rad (fast axis horizontal + mounting offset)
    },
    affects: ["Camera", "Spectral Camera"]
}
