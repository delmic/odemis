CryoSECOM: {
    class: Microscope,
    role: cryo-secom,
    children: ["3DOF Stage",
               "5DOF Stage", "Objective Stage", "Focus",
               "Light Source", "Filter Wheel", "Camera", "Optical Objective",
               "SEM E-beam", "SEM Detector",  "Linked Stage"
    ],
}

# Quanta SEM driven via external X/Y connection, using a DAQ board
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    creator: "SEM Scan Interface",
    role: e-beam,
    init: {
        channels: [0, 1],
        # On Delmic scanning box v2, the voltage is x2, so need to specify twice smaller values than needed.
        #max_res: [4096, 4096], # px
        limits: [[1.8, -1.8], [1.8, -1.8]],  # V
        park: [-2, -2], # V
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {4: True}, # output ports -> True (indicate scanning) or False (indicate parked)
        settle_time: 10.e-6, # s
        hfw_nomag: 0.336644, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 4986, # (ratio)
    },
    affects: ["SEM Detector", "Camera"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI1/AI9 (differential)
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 1,
        limits: [-3, 3], # V
    },
}

"Light Source": {
    class: lle.FakeLLE,
    role: light,
    init: {
        port: "/dev/ttyUSB*",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        # Values are from vendor: http://lumencor.com/products/filters-for-spectra-x-light-engines/
        sources: {"UV": [379.e-9, 384.e-9, 390.e-9, 396.e-9, 401.e-9], # 390/22
                  "cyan": [472.e-9, 479.e-9, 485.e-9, 491.e-9, 497.e-9], # 485/25
                  "green": [544.e-9, 552.e-9, 560.e-9, 568.e-9, 576.e-9], # 560/32
                  "red": [638.e-9, 643.e-9, 648.e-9, 653.e-9, 658.e-9], # 648/20
                 }
        },
        # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
    affects: ["Camera"],
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {
        # TODO: 100x mag?!
        mag: 100.0, # ratio, (actually of the complete light path)
        na: 0.85, # ratio, numerical aperture
        ri: 1.0, # ratio, refractive index
    },
    affects: ["Camera"]
}
#TODO: add exposureTime: 0.3, # s
"Camera": {
    class: simcam.Camera,
    role: ccd,
    init: {
      image: "songbird-sim-ccd.h5",
      max_res: [260, 348], # 4x4 tiles
    },
    dependencies: {focus: "Focus"}
}

# Controller for the filter-wheel
# DIP must be configured with address 2 (= 0100000)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    init: {
        port: "/dev/fake3",
        address: null,
        axes: ["fw"],
        ustepsize: [1.227184e-6], # [rad/µstep]
        rng: [[-7, 14]], # rad
        unit: ["rad"],
        refproc: "Standard",
        refswitch: {"fw": 4},
#        inverted: ["fw"],
    },
}

"Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: filter,
    dependencies: {"band": "Optical Actuators"},
    init: {
        axis_name: "fw",
        # TODO: a way to indicate the best filter to use during alignement?
        # It supports 4 filters
        positions: {
            # pos (rad) -> m,m
             3.857177647: [420.e-9, 460.e-9], # FF01-440/40-25
             3.071779484: [510.e-9, 540.e-9], # FF01-525/30-25
             2.286381320: [589.e-9, 625.e-9], # FF01-607/36-25
             1.500983157: [672.e-9, 696.e-9], # FF02-684/24-25
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
    affects: ["Camera"],
}

# Use 2 MultiplexActuators to separate the axes of the optical stage over different roles
# TODO: If the X/Y axes are not aligned with the image axis, swap the axes in the
# mapping here + use "inverted", if it's just a matter of 90° rotation. If the
# angle is not such a multiple, use ConverterStage.
"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: ["Camera"],
    dependencies: {"x": "3DOF Stage", "y": "3DOF Stage"},
    init: {
        axes_map: {"x": "x", "y": "y"},
#        inverted: ["x"]
    },
    metadata: {
        FAV_POS_ACTIVE: {'x':  0.0, 'y':  -0.002,},
        FAV_POS_DEACTIVE:  {'x':  0.01, 'y':  0.00, },
    },
}
# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they have opposite direction than convention
# (so the stage "position" is the current position observed)
"5DOF Stage": {
  role:  s5,
  class: tmcm.TMCLController,
  init: {
    port: "/dev/fake6",
    refproc: "Standard",
    axes: ["x", "y", "z", "rx", "rz"],
    unit: ["m", "m", "m", "rad", "rad"],
    rng: [[-6.0e-3, 6.0e-3], [-6.0e-3, 6.0e-3], [-6.0e-3, 6.0e-3], [-0.49, 0.49], [-0.5236, 5236]],
    ustepsize: [5.9e-8, 5.9e-8, 5.9e-8, 5.9e-6, 5.9e-6],
  }
}

"3DOF Stage": {
  role:  s3,
  class: tmcm.TMCLController,
  init: {
    port: "/dev/fake3",
    axes: ["x", "y", "z"],
    unit: ["m", "m", "m"],
    rng: [[-6.0e-3, 6.0e-3], [-6.0e-3, 6.0e-3], [-6.0e-3, 6.0e-3]],
    ustepsize: [5.9e-8, 5.9e-8, 5.9e-8],
    refproc: "Standard",
  },
  metadata: {
    FAV_POS_DEACTIVE: {'z': -6.e-3},
  },
}
"Linked Stage": {
  class: actuator.LinkedHeightActuator,
  role: stage,
  children: {
    "focus": "Focus",
  },
  dependencies: {
    "stage": "5DOF Stage",
    "lensz": "3DOF Stage",
  },
  metadata: {
    POS_ACTIVE_RANGE: {'x':  [0.00, 0.003], 'y':  [-0.003, -0.001], 'z':  [0.00, 0.003], } , # stage Z – lens Z, when the lens Z is the closest (highest) from the stage
    FAV_POS_ACTIVE: {'rx': 0.00, 'rz': 0.0, 'x':  0.0, 'y':  -0.002, 'z':  0.002},
    FAV_POS_DEACTIVE:  {'rx': 0.00, 'rz': 0.0, 'x':  0.002, 'y':  0.00, 'z':  -0.001},
    FAV_AREA:  [-0.001, -0.001, 0.001, 0.001],  # left, top, right, bottom
    FAV_POS_COATING: {'rx': 0.4363, 'rz': 0.0, 'x':  0.0, 'y':  -0.003, 'z':  0.001},
  },
   affects: ["Camera"],
}

# Note: Z goes up, so the bigger the value, the closer the lens is from the stage.
"Focus": {
  role: focus,
  init: {
    # at the maximum of the range, stage Z – lens Z == MD_POS_COR
    rng: [0, 4.2e-3],  # min/max positions in m
  },
  metadata: {
    POS_COR: {'z':  -0.0045} , # stage Z – lens Z, when the lens Z is the closest (highest) from the stage
  },
      affects: ["Camera"],
}