# Configuration to simulate a SPARC system with only the AR camera.
"SPARC AR Camera": {
    class: Microscope,
    role: sparc,
    emitters: ["EBeam ExtXY", "AR Lens"],
    detectors: ["SED ExtXY", "ARCam"],
    actuators: ["MirrorMover"],
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM ExtXY": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {scanner: "EBeam ExtXY", detector0: "SED ExtXY"}
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"EBeam ExtXY": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [-5, -5], # V
        #fastpark: True,
        settle_time: 10.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 1000, # (ratio)
    },
    affects: ["SED ExtXY", ARCam] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 5/AI GND
"SED ExtXY": { # aka ETD
    # Internal child of Quanta ExtXY, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

# # This is a more realistic SEM simulator (image-wise, but less realistic HW-wise)
# "SEM ExtXY": {
#     class: simsem.SimSEM,
#     role: null,
#     init: {
#            drift_period: 5, # s  (disable to get a the whole resolution of the image)
#            image: "sparc-etd-gold-balls.h5",
#     },
#     # more detectors can be added, if necessary
#     children: {scanner: "EBeam ExtXY",
#                detector0: "SED ExtXY"
#     }
# }
#
# "EBeam ExtXY": {
#     # Internal child of SimSEM, so no class
#     role: e-beam,
#     init: {},
#     properties: {
#         dwellTime: 10.e-6, # s
#     },
#     affects: ["SED ExtXY", AndorSpec, ARCam] # affects the CCD in case of cathodoluminescence
# }
# 
# "SED ExtXY": { # aka ETD
#     # Internal child of SimSEM, so no class
#     role: se-detector,
#     init: {},
# }


"AR Lens": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 0.4917, # ratio
           na: 0.2, # ratio, numerical aperture
           ri: 1.0, # ratio, refractive index
           pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
           x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
           hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
           focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
           parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
          }, 
    affects: ["ARCam"]
}

ARCam: {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {
       device: "fake",
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

MirrorMover: {
    class: pigcs.FakeBus,
    role: mirror,
    init: {
        port: "/dev/ttyPIGCS",
        # X/Y are same axes as SEM
        # yaw/pitch are axes according to Mirror's orientation
        # rz = yaw, ry = pitch (from Mirror's point of view)
        # axis -> controller, channel, closed-loop?
        axes: {"y":  [1, 1, False],
               "x":  [2, 1, False],
               "ry": [3, 1, False],
               "rz": [4, 1, False]},
        # inverted: ["y", "ry"],
        #dist_to_steps: {"x": 100000, "y": 100000}, # step/m
    },
    properties: {
        speed: {"x": 0.1, "y": 0.1, "rz": 0.1, "ry": 0.1} #m/s
    }
}

