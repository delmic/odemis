# Prerequisites: Simulators that need to be available
# - xt adapter simulator: python3 xtadapter/server_sim_xttoolkit.py
# - ASM and SAM simulator by Technolution, started with:
#   technolution_asm_simulator/simulator2/run_the_simulator.sh

FASTEM-sim: {
    class: Microscope,
    role: mbsem,
    children: ["SEM", "MultiBeam Scanner XT", "EBeam Focus", "EBeam Detector",
               "Chamber",  # "Chamber Camera", "Chamber Light",
               "Sample Stage", "Sample Stage in carrier coordinates",
               "Sample Stage in multiprobe coordinates",
               "Stage Fine Position", "Metrology Module",
               "Beam Shift Controller", "Focus Tracker",
               "ASM", "MultiBeam Scanner", "Mirror Descanner", "MPPC",
               "Detector Rotator", "Optical Objective",
               "Diagnostic Camera", # "Navigation Camera",
               ],
}

"SEM": {
    class: xt_client.SEM,
    # TODO remove role when children components are all implemented
    role: sem-api,
    init: {
        address: "PYRO:Microscope@localhost:4242",
    },
    children: {
        mb-scanner: "MultiBeam Scanner XT",
        focus: "EBeam Focus",
        detector: "EBeam Detector",
        chamber: "Chamber",
    }
}

"MultiBeam Scanner XT": {
    # Internal child of SEM, so no class
    role: e-beam,
    init: {
        hfw_nomag: 0.138, # in Quad view, just useful to match the XT software display
        channel: "electron1",
    },
    metadata: {
        # Compensation to the pixel size (ie, the FoV) needed to have a good match between
        # stage movement and SEM image *AT LOW MAGNIFICATIONS*.
        # This is useful for the overview image acquisition.
        PIXEL_SIZE_COR: [1.05, 1.05], # ratio
        SINGLE_BEAM_ROTATION: 0.,  # rad; rotation for overview image acquisition
        MULTI_BEAM_ROTATION: 0.0157,  # rad; rotation for multibeam image acquisition (~0.9°)
        # Correction for the shift in (x, y) between immersion mode and field free mode:
        FIELD_FREE_POS_SHIFT: [90.0e-6, 50.0e-6],  # [m]
    },
    persistent: {
        metadata: [PIXEL_SIZE_COR],
    },
    affects: ["MultiBeam Scanner"],
}

"EBeam Focus": {
    # Internal child of SEM, so no class
    role: ebeam-focus,
}

"EBeam Detector": {
    # Internal child of SEM, so no class
    role: se-detector,
}

"Chamber": {
    # Internal child of SEM, so no class
    role: chamber,
}

# The stage is moving in the global coordinate system.
#   A positive x movement moves the stage in the positive x direction in the global coordinate system.
#   A positive y movement moves the stage in the positive y direction in the global coordinate system.
# When scan rotation in XT UI is 0:
#   A positive x movement moves a feature on the XT UI to the right.
#   A positive y movement moves a feature on the XT UI to the top.
"Sample Stage": {
    class: piezomotor.PMD401Bus,
    role: stage-bare,
    init: {
        port: "/dev/fake",
        axes: {
            'x': {
                axis_number: 1,
                speed: 0.001, # m/s
                closed_loop: True,
                range: [-25.e-3, 25.e-3],  # m
                motorstep_resolution: 4.5e-6,  # m / step
                encoder_resolution: 1.220703e-9,  # m / count, should be 20 µm / 2 ** 14 = 1.22e-9
                },
            'y': {
                axis_number: 2,
                speed: 0.001, # m/s
                closed_loop: True,
                range: [-25.e-3, 25.e-3],  # m
                motorstep_resolution: 4.5e-6,  # m / step
                encoder_resolution: 1.220703e-9,  # m / count, should be 20 µm / 2 ** 14 = 1.22e-9
                },
            'z': {
                axis_number: 3,
                speed: 0.00002, # m/s, 0.005 * 0.035 # reduced by about factor of about 50 on z axis
                closed_loop: True,
                range: [-100.e-6, 200.e-6],  # m
                motorstep_resolution: 7.854779217697914e-08, # m / step, 4.5e-6 * np.tan(np.radians(1)), on the z axis the value needs to be multiplied by tan(1).
                encoder_resolution: 2.13623e-11,  # m / step, 1.220703e-9 * np.tan(np.radians(1)), on the z axis the value needs to be multiplied by tan(1).
                },
        },
        # positive move in x -> feature moves to the right on TFS UI
        # positive move in y -> feature moves to the top on TFS UI
        inverted: ["y"],
        # param_file: "/usr/share/odemis/pmd401.pmd.tsv",  # don't use for simulator
    },
}

# Used by the "Sample Stage in carrier coordinates" to invert the axes direction, and shift the origin.
"Sample Stage XY Conversion": {
    class: actuator.ConvertStage,
    role: null,
    dependencies: {"orig": "Sample Stage"},
    init: {
        axes: ["x", "y"],  # names of the axes of "Sample Stage"
        # Initialized with the axes inverted, as we want the actual movement to
        # be opposite of the image axes, so that the center of the image corresponds
        # to the stage position.
        rotation: 3.141592653589793,  # rad (= 180°) won't be changed
        # TODO: also add a shift between the origin of the stage-bare (at the middle of the carrier)
        #  and the physical origin of the sample carrier (at the bottom left of the 1st scintillator)  -> translation
    },
}

# Sample stage in sample carrier coordinate system:
# Allows to move the stage in the same coordinates as the SEM images.
# The X/Y axes are aligned with the X/Y axes of the ebeam scanner in single beam acquisition.
# When scan rotation in XT UI is 0:
#   A positive x movement moves a feature on the XT UI to the left.
#   A positive y movement moves a feature on the XT UI to the bottom.
"Sample Stage in carrier coordinates": {
    class: actuator.MultiplexActuator,
    role: stage,
    # external axis -> dependency
    dependencies: {"x": "Sample Stage XY Conversion", "y": "Sample Stage XY Conversion", "z" : "Sample Stage"},
    init: {
        axes_map: {"x": "x", "y": "y", "z": "z"},  # external axis -> dependency axis
    },
    metadata: {
        # X/Y: position of the scintillators
        # Z: useful range for the (auto) focus
        POS_ACTIVE_RANGE: {"x": [-25.e-3, 25.e-3], "y": [-24.5e-3, 24.5e-3], "z": [-85.e-6, 5.e-6]}, # m, min/max
        FAV_POS_ACTIVE: {"z": -63.e-6},  # [m] Estimate for good focus position - autofocus starts here to search
        # Centers (X, Y) [m] of each scintillator from bottom-left position with a sample
        SAMPLE_CENTERS: {
            "SCINTILLATOR 1": [7.0e-3, 6.5e-3],
            "SCINTILLATOR 2": [7.0e-3, 24.5e-3],
            "SCINTILLATOR 3": [7.0e-3, 42.5e-3],
            "SCINTILLATOR 4": [25.0e-3, 6.5e-3],
            "SCINTILLATOR 5": [25.0e-3, 24.5e-3],
            "SCINTILLATOR 6": [25.0e-3, 42.5e-3],
            "SCINTILLATOR 7": [43.0e-3, 6.5e-3],
            "SCINTILLATOR 8": [43.0e-3, 24.5e-3],
            "SCINTILLATOR 9": [43.0e-3, 42.5e-3],
        },
        # Size [m] of each scintillator
        SAMPLE_SIZES: {
            "SCINTILLATOR 1": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 2": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 3": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 4": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 5": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 6": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 7": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 8": [14.0e-3, 13.0e-3],
            "SCINTILLATOR 9": [14.0e-3, 13.0e-3],
        },
        # minx, miny, maxx, maxy [m] positions of rectangles for background from bottom-left position with a sample
        SAMPLE_BACKGROUND: [
            [-35.0e-3, -35.5e-3, 0.0, 84.5e-3],
            [14.0e-3, -35.5e-3, 18.0e-3, 84.5e-3],
            [32.0e-3, -35.5e-3, 36.0e-3, 84.5e-3],
            [50.0e-3, -35.5e-3, 85.0e-3, 84.5e-3],
            [-35.0e-3, -35.5e-3, 85.0e-3, 0.0e-3],
            [-35.0e-3, 13.0e-3, 85.0e-3, 18.0e-3],
            [-35.0e-3, 31.0e-3, 85.0e-3, 36.0e-3],
            [-35.0e-3, 49.0e-3, 85.0e-3, 84.5e-3],
        ],
    },
    affects: ["Diagnostic Camera", "MultiBeam Scanner XT", "MultiBeam Scanner", "MPPC"]
}

# Sample stage in multiprobe coordinate system:
# Allows to move the stage in the same coordinate system as the multiprobe.
# TODO check this
#   A positive x movement moves a feature on the single field image to the right/left.
#   A positive y movement moves a feature on the single field image to the top/bottom.
# The X/Y axes are aligned with the X/Y axes of the multiprobe (or scan direction of
# the ebeam scanner in multi-beam acquisition).
# At high magnification the ebeam scale is more accurate than the stage movement. Adjust,
# the scale of the stage to match a distance on the ebeam.
"Sample Stage in multiprobe coordinates": {
    class: actuator.ConvertStage,
    role: stage-scan,
    dependencies: {"orig": "Sample Stage"},
    init: {
        axes: ["x", "y"],  # names of the axes of "Sample Stage"
    },
    metadata: {
        # Default values (overwritten if stored in the persistent storage)
        ROTATION_COR: 0,  # rad (= 0°) (angle between stage-bare and multiprobe)
        # This becomes useful for high magnification imaging (megafield acquisition).
        PIXEL_SIZE_COR: [1, 1],  # ratio (from stage to multiprobe calibration)
    },
    persistent: {
        metadata: [ROTATION_COR],
    },
}

# Fine positioning of the stage: measures the actual position of the stage
# instead of adjusting the stage. The ebeam position is adjusted via the
# ebeam shift controller.
# wrapper component for metrology module (MM):
# maps two channels into one to measure x axis and rotation; y is mapped to y
"Stage Fine Position": {
    class: actuator.DualChannelPositionSensor,
    role: stage-pos,
    dependencies: {"sensor": "Metrology Module",
                   "stage": "Sample Stage"},
    init: {
        channels: {"x": "x1", "y": ["y1", "y2"]},
        distance: 0.1, # (m)
        # Ensures that the stage & MM are referenced sequentially (not simultaneously)
        ref_on_init: "if necessary",  # use "always" to force referencing at init
    },
}

# metrology module (MM) measures position of stage with 3 position sensors
"Metrology Module": {
    class: smaract.Picoscale,
    role: null,
    init: {
        locator: "fake",
        channels: {"x1": 0, "y1": 1, "y2": 2},
    },
}

# controls the ebeam shift via an external interface (RS485 cable)
"Beam Shift Controller": {
    class: tfsbc.BeamShiftController,
    role: ebeam-shift,
    dependencies: {"scanner": "MultiBeam Scanner XT"},
    init: {
        port: "/dev/fake",
        serialnum: FT43FD2D,
    },
    affects: ["MultiBeam Scanner XT", "MultiBeam Scanner"],
}

"Focus Tracker": {
    class: focustracker.FocusTrackerCO,
    role: focus-pos,
    init: {
        node_idx: 0x10,
        channel: 'fake',
    },
}

# simulated acquisition server module (ASM) connecting to the simulated scanning and acquisition module (SAM),
# which includes the detector (MPPC)
# SAM includes ebeam and mirror descanner control
"ASM": {
    class: technolution.AcquisitionServer,
    role: asm,
    init: {
        host: "http://localhost:8080/v2",
        externalStorage: {"host": "localhost",
                          "username": "ftpuser",
                          "password": "tails",
                          "directory": "asm_service"}
    },
    children: {"EBeamScanner": "MultiBeam Scanner",
               "MirrorDescanner": "Mirror Descanner",
               "MPPC": "MPPC"
    },
}

"MultiBeam Scanner": {
    # Internal child of ASM, so no class
    role: multibeam,
    # Default values (overwritten if stored in the persistent storage)
    persistent: {
        properties: [scanOffset, scanAmplitude],
    },
    metadata: {
        # Factory calibrations of the scanner amplitude and offset
        SCAN_OFFSET: [-0.0935, 0.0935],  # [a.u._scan] the start of the sawtooth scanning signal
        SCAN_AMPLITUDE: [0.187, -0.187],  # [a.u._scan] the amplitude of the sawtooth scanning signal
        SCAN_OFFSET_CALIB: [-0.0935, 0.0935],  # [a.u_scan] only needed for simulator
        SCAN_AMPLITUDE_CALIB: [0.187, -0.187],  # [a.u_scan] only needed for simulator
    },
}

"Mirror Descanner": {
    # Internal child of ASM, so no class
    role: descanner,
    # Default values (overwritten if stored in the persistent storage)
    persistent: {
        properties: [scanOffset, scanAmplitude],
    },
    metadata: {
        # Factory calibrations of the descanner gain and offset
        SCAN_OFFSET: [-0.013, -0.119],  # [a.u._descan] start of the sawtooth descanner signal
        SCAN_AMPLITUDE: [0.0082, -0.0082],  # [a.u._descan] the dynamic amplitude of the sawtooth descanning signal
        # On the hardware the scan gain is calculated, for simulation this is not possible and therefore add it here.
        SCAN_GAIN: [5000, 5000],  # [px_dc/a.u._descan] the number of pixels a spot moves per arbitrary unit
    },
}

"MPPC": {
    # Internal child of ASM, so no class
    role: mppc,
    # Default values (overwritten if stored in the persistent storage)
    persistent: {
        properties: [cellDarkOffset, cellDigitalGain, cellTranslation],
    },
    metadata: {
        USER: "fastem-user-1",
    },
}

# rotates the IADOM (in-air detector optics module) and thus the mppc
# via the k-mirror (part of the IADOM)
# only rotations in the range of [-2pi, 2pi]
"Detector Rotator": {
    class: tmcm.CANController,
    role: det-rotator,
    init: {
        channel: "fake",
        node_id: 1,
        datasheet: "TMCM-1240_CANopen_V322.dcf",  # not used in simulator
        axes: ["rz"],
        refproc: "Standard",
        #param_file: "/usr/share/odemis/tmcm-pd1240.tmcc.tsv", # don't use in simulator
        ustepsize: [3.272492347489e-6], # 2 PI / (200 steps/turn * 256 µsteps/step * 75 gear-ratio * 0.5 image rotation per physical rotation)
        unit: ["rad"],
        rng: [[-6.3, 6.3]],  # allow full turn (2 * PI) in either direction
        # positive move on rz rotates k-mirror (det-rotator) CCW -> image on diagnostic camera rotates CW
        inverted: ['rz'],
    },
    affects: ["Diagnostic Camera", "MPPC"],
}

# set the optical path magnification and thus compute the pixel size of the diagnostic camera.
"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {
        mag: 60, # ratio, magnifying; higher magnification is a stronger simulated blur
        na: 0.95,  # numerical aperture
        ri: 1,  # refractive index
    },
    affects: ["Diagnostic Camera"],
}

# diagnostic detector to monitor the multiprobe pattern
# TODO this is now a static image and does not simulate any scanning movement
# executed with the SAM
"Diagnostic Camera": {
    class: simcam.Camera,
    role: diagnostic-ccd,
    dependencies: {"focus": "Sample Stage in carrier coordinates"},
    init: {
        image: "../acq/align/test/multiprobe01.tiff",
    },
    properties: {
        exposureTime: 0.005, # s
    },
    metadata: {
        # x and y: Factory calibration position in diagnostic camera pixels, where the multiprobe is visible on
        # the diagnostic camera and the mppc detector.
        # z: Simulated stage position where the camera is in focus; choose different from stage metadata
        # to better simulate the autofocusing procedure. Note: ONLY needed for simulator.
        FAV_POS_ACTIVE: {"x": 750,  # [px_dc] good multiprobe position
                         "y": 550,  # [px_dc] good multiprobe position
                         "z": -43.e-6}  # [m] position of stage where the multiprobe is displayed in focus
    },
}
