# Configuration for the SPARC v2 system with the 2nd spectrometer (connected via optical fiber from the plate 2)
"SPARCv2 2 spectrographs + monochromator": {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector","Calibration Light", "Integrated Spectrograph",
               "Optical Path Properties", "Spectrometer Selector", "External Spectrograph",
               "Camera", "Spectrometer", "Fiber align", "Spectral Camera",
               "Spec CCD Flipper", "Spectrograph focus", "Monochromator",
               "Mirror Actuators", "Mirror Actuators in XY referential", "Slit",
               "Lens1 Mover", "Lens2 Switch"],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: light.Light,
    role: "brightlight",
    power_supplier: "Power Control Unit",
    affects: ["Camera"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
#        port: "/dev/ttyPMT*",
        port: "/dev/fake", # for simulator
        pin_map: {"Calibration Light": 0,
                  "Camera": 4, "Spectral Camera": 5, "Integrated Spectrograph": 6,
                  "Optical Actuators": 2},
        delay: { # Time it takes before a component is accessible
            "Calibration Light": 0, # To turn on/off the light, it's immediate
            "Camera": 1,
            "Spectral Camera": 1,
            "Integrated Spectrograph": 10, # SR-193 needs a looong time to initialise
            "Optical Actuators": 1,
        },
        init: { # Which component to power on from the very beginning (to save time)
            "Camera": True,
            "Spectral Camera": True,
            "Integrated Spectrograph": True,
            "Optical Actuators": True
        },
    }
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       counter0: "Monochromator",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        settle_time: 5.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Spectrometer", "Camera"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 0/AI GND
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

## This is the counting PMT, called monochromator PMT
# No user settings
"Monochromator": {
    # Internal child of SEM Scan Interface, so no class
    role: monochromator,
    init: {
        source: 8,  # PFI number
    },
}

# In reality, this is a Zyla, but you need libandor3-dev to simulate an AndorCam3
# Depending exactly on the configuration, it might also be used for spectrometer
"Camera": {
    class: andorcam2.AndorCam2,
    role: ccd,
    power_supplier: "Power Control Unit",
    init: {
       device: "fake",
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

# Spectrometer 1 = Andor Zyla + Shamrock SR193 (connected via USB)
#"Spectrometer": {
#    class: spectrometer.CompositedSpectrometer,
#    role: spectrometer,
#    dependencies: {detector: "Camera", spectrograph: "Integrated Spectrograph"},
#    properties: {
#        binning: [4, 256],
#    },
#}

"Integrated Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    power_supplier: "Power Control Unit",
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
        # TODO: put the right filters
        bands: { # The filters in the filter-wheel
            6: "pass-through"
        },
        fstepsize: 10.9e-6, # m, size of one focus step
    },
    affects: ["Camera"],
}

"Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: "focus",
    dependencies: {"z": "Integrated Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["Camera"],
}

# Provide the mirror (aka port selector) of the spectrograph as a separate component
# Only used to disable the AR CCD, to perform basic background subtraction
"Spec CCD Flipper": {
    class: actuator.MultiplexActuator,
    role: "spec-det-selector",
    dependencies: {"rx": "Integrated Spectrograph"},
    init: {
        axes_map: {"rx": "flip-out"},
    },
    affects: ["Camera"],
}


# Spectrometer = Andor iDus + Shamrock SR303i (connected via USB)
# Note that the SR193 could be used as a spectrometer too, but it's not needed, and that keeps things simple
"Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    dependencies: {detector: "Spectral Camera", spectrograph: "External Spectrograph"},
    properties: {
        binning: [4, 16],
    },
}

"External Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph-dedicated,
    dependencies: {"ccd": "Spectral Camera"},
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
    },
    # In practice, it doesn't affect the monochromator as it's not a monochromator but
    # just a CL detector, but for now Odemis needs it connected to a spectrograph.
    affects: ["Spectral Camera", "Spectrometer", "Monochromator"],
}

# Dedicated camera for the acquisition of the spectra
"Spectral Camera": {
    class: andorcam2.AndorCam2,
    role: sp-ccd,
    init: {
        #device: 0,
        device: "fake",
        transp: [-1, 2], # if mirrored on X axis
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Standard mirror config
    init: {
       mag: 0.31, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
       rotation: -1.570796326795, # rad, 90° rotation between optical axis and SEM Y axis
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer", "Monochromator"]
}

# Controller for the motors moving the various parts of the optical box
# DIP must be configured with address 2 (= 0100000)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        #port: "/dev/ttyTMCM*",
        port: "/dev/fake6",
        #address: 2,
        address: null,
        axes: ["l1", "l2", "spec-sel", "fiby", "slit"],
        # These values are adapted to make the simulator roughly the same speed
        ustepsize: [25.1e-9, 25.1e-9, 26.1e-9, 5.86e-9, 5.e-9], # m/µstep
        refproc: "Standard",
        refswitch: {"l1": 0, "l2": 0, "spec-sel": 4}, # fiby has no ref swich
        inverted: ["l2"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        FAV_POS_ACTIVE: {"x": -0.0045} # m
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer", "Monochromator"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            -4.e-3: "on",
            -0.02: "off", # completely out of the path
        },
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer", "Monochromator"],
}

# Control the slit position to either fully-open or small (dependent on the spectrometer slit-in)
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: "slit-in-big",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "slit",
        positions: {
            0: "on", # fully opened
            0.0012: "off", # opening based on the small slit
        },
    },
    affects: ["Camera"],
}

# Note that the next two components actually move the _same_ axis!
# Mirror & Lens in Plate 2, to change X&Y of fiber alignment
"Fiber align": {
    class: actuator.MultiplexActuator,
    role: "fiber-aligner",
    dependencies: {"x": "Optical Actuators", "y": "Optical Actuators"},
    init: {
        axes_map: {"x": "spec-sel", "y": "fiby"}
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer"],
}

# Mirror in Plate 2, selects between integrated spectrometer and external spectrometer
"Spectrometer Selector": {
    class: actuator.MultiplexActuator,
    role: "spec-selector",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "spec-sel"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Position of the mirror to select the external spectrometer (can be improved by user)
        FAV_POS_ACTIVE: {"x": 0.026112848}, # m
        FAV_POS_DEACTIVE: {"x": 0.022} # m
    },
    affects: ["Camera", "Spectral Camera", "Spectrometer", "Monochromator"],
}

# Controller for moving the 'Redux' stage
# Note: the S axis can _only_ be moved when the l axis is near the active/engaged position
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/fake6",
        address: null,
        #port: "/dev/ttyTMCM*",
        #address: 4,
        axes: ["s", "l"],
        ustepsize: [1.e-6, 1.e-6], # m/µstep (big, for the simulator to move fast)
        refproc: "Standard",
        refswitch: {"s": 0, "l": 0},
    },
    metadata: {
        # Default position of the mirror engaged (will be improved during alignment)
        FAV_POS_ACTIVE: {"l": 70.e-3, "s": 5.e-3},  # m, m
    },
}

# Internal component to convert between the referential of the mirror actuators
# and the X/Y referential of the SEM. Used by the mirror alignment functions.
"Mirror Actuators in XY referential": {
    class: actuator.ConvertStage,
    role: "mirror-xy",
    dependencies: {"orig": "Mirror Actuators"},
    init: {
        axes: ["l", "s"], # mapped respectively to X, Y
        rotation: -1.0471975511965976, # rad (= 60°)
        # Note: if you want to use absolute moves, add a "translation" too
    },
}

