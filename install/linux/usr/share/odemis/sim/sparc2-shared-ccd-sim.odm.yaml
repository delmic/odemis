# Configuration for a simulated SPARC v2 system with a single CCD used for AR
# and spectrometry.
"SPARCv2 1 camera": {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector", "Calibration Light",
               "Optical Path Properties",
               "Camera", "Spectrometer", "CL Detector", "Spectrograph",
               "Spectrograph focus",
               "Mirror Actuators", "Mirror Actuators in XY referential",
               "Slit", "CL Selector", "CL Filter Wheel",
               "Lens1 Mover", "Lens2 Switch"],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: light.Light,
    role: "brightlight",
    power_supplier: "Power Control Unit",
    affects: ["Camera"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
        port: "/dev/fake", # for simulator
        pin_map: {"Calibration Light": 0, "CL PMT control unit": 1,
                  "Camera": 4, "Spectrograph": 6,
                  "Optical Actuators": 2},
        delay: { # Time it takes before a component is accessible
            "Calibration Light": 0, # To turn on/off the light, it's immediate
            "CL PMT control unit": 0,
            "Camera": 3,
            "Spectrograph": 10,
            "Optical Actuators": 1
        },
        init: { # Which component to power on from the very beginning (to save time)
            "Camera": True,
            "Spectrograph": True,
            "Optical Actuators": True
        },
    }
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "CL PMT",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [0, 0], # V
        settle_time: 5.e-6, # s
        hfw_nomag: 0.25, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector", "Spectrometer", "Camera"] # affects the CCD in case of cathodoluminescence
}

# Must be connected on AI 0/AI GND
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

# CL PMT: composed of the control unit + the PMT output connected to the DAQ board

# Must be connected on AI 1/AI GND
"CL PMT": { # the raw detector of the PMT
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {
        channel: 1, # 0-> sawtooth waves, 1-> square waves
        limits: [3, 0], # V, with contrast reversed
    },
}

"CL PMT control unit": {
    class: pmtctrl.PMTControl,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/fake", # for simulator
        prot_time: 0.0002,  # s
        prot_curr: 50.e-6,  # A
    }
}

"CL Detector": {
    class: pmtctrl.PMT,
    role: cl-detector,
    dependencies: {
       "detector": "CL PMT",
       "pmt-control": "CL PMT control unit",
    },
}

# In reality, this is a Zyla, but you need libandor3-dev to simulate an AndorCam3
# Depending exactly on the configuration, it might also be used for spectrometer
"Camera": {
    class: andorcam2.AndorCam2,
    role: ccd,
    power_supplier: "Power Control Unit",
    init: {
       device: "fake",
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

# "Camera": {
#     class: simcam.Camera,
#     role: ccd,
#     power_supplier: "Power Control Unit",
#     init: {
#         image: "sparc-ar-mirror-align.h5", # only for simulator
#     },
#     dependencies: {
#         focus: "Spectrograph focus",
#     },
# }

# Spectrometer = Zyla + Shamrock SR193 (connected via USB)
"Spectrometer": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer,
    dependencies: {detector: "Camera", spectrograph: "Spectrograph"},
    init: {
        transp: [1, -2], # only applied to the spectrometer data (not raw CCD)
    }
#     properties: {
#         binning: [4, 1080], # CCD has 2160 px, so only half is used
#     },
}

"Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    power_supplier: "Power Control Unit",
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
        fstepsize: 10.9e-6, # m, size of one focus step
    },
    affects: ["Camera", "Spectrometer"],
}

"Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: "focus",
    dependencies: {"z": "Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["Camera", "Spectrometer"],
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Standard mirror config
    init: {
       mag: 0.31, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [458, 519], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
       rotation: -1.570796326795, # rad, 90° rotation between optical axis and SEM Y axis
    },
    affects: ["Camera", "Spectrometer"]
}

# Controller for the motors moving the various parts of the optical box
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["l1", "l2", "cl-sel", "fw", "slit"],
        # These values are adapted to make the simulator roughly the same speed
        ustepsize: [25.1e-9, 25.1e-9, 26.1e-9, 3.392e-5, 5.e-9], # m/µstep, excepted for the fw: rad/µstep
        refproc: "Standard",
        refswitch: {"l1": 0, "l2": 0, "cl-sel": 4, "fw": 4},
        inverted: ["l2"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        FAV_POS_ACTIVE: {"x": -0.0045} # m
    },
    affects: ["Lens2 Switch"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            -4.e-3: "on",
            -0.02: "off", # completely out of the path
        },
    },
    affects: ["Camera", "Spectrometer", "CL Detector"],
}

# Control the slit position to either fully-open or small (dependent on the spectrometer slit-in)
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: "slit-in-big",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "slit",
        positions: {
            0: "on", # fully opened
            -0.0012: "off", # opening based on the small slit
        },
    },
    affects: ["Camera", "Spectrometer"],
}

# Mirror in Plate 2, selects between spectrometer and cl-detector
"CL Selector": {
    class: actuator.FixedPositionsActuator,
    role: "cl-det-selector",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "cl-sel",
        positions: {
            0.003: ["CL Detector"],
            0.01: ["Camera", "Spectrometer"]
        },
    },
    affects: ["Camera", "Spectrometer", "CL Detector"],
}

"CL Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: "cl-filter",
    dependencies: {"band": "Optical Actuators"},
    init: {
        axis_name: "fw",
        # It supports up to 8 filters
        positions: {
            # pos (rad) -> m,m
            0: [420.e-9, 460.e-9],        # 1
            0.785398: [500.e-9, 550.e-9], # 2
            1.570796: "polariser",        # 3
            3.9269908: "pass-through",    # 6
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
    affects: ["CL Detector"],
}

# Controller for moving the 'Redux' stage
# Note: the S axis can _only_ be moved when the l axis is near the active/engaged position
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["s", "l"],
        ustepsize: [1.e-6, 1.e-6], # m/µstep (big, for the simulator to move fast)
        refproc: "Standard",
        refswitch: {"s": 0, "l": 0},
    },
    metadata: {
        # Default position of the mirror engaged (will be improved during alignment)
        FAV_POS_ACTIVE: {"l": 70.e-3, "s": 5.e-3},  # m, m
    },
}

# Internal component to convert between the referential of the mirror actuators
# and the X/Y referential of the SEM. Used by the mirror alignment functions.
"Mirror Actuators in XY referential": {
    class: actuator.ConvertStage,
    role: "mirror-xy",
    dependencies: {"orig": "Mirror Actuators"},
    init: {
        axes: ["l", "s"], # mapped respectively to X, Y
        rotation: -1.0471975511965976, # rad (= 60°)
        # Note: if you want to use absolute moves, add a "translation" too
    },
}
