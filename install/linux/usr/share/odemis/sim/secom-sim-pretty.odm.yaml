SimSECOM: {
    class: Microscope,
    role: secom,
    emitters: [Spectra, "Nikon Super Duper", "MultiBand Fixed Filter", "EBeam ExtXY"],
    detectors: ["Andor SimCam", "SED ExtXY"],
    actuators: ["OLStage", "SEM-Optical Alignment", "OpticalZ actuator", "EBeam Focus"],
}

Spectra: {
    class: lle.FakeLLE,
    role: light,
    init: {
        port: "/dev/ttyLLE",
        # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        sources: {"red": [615.e-9, 625.e-9, 633.e-9, 640.e-9, 650.e-9],
                  "green": [525.e-9, 540.e-9, 550.e-9, 555.e-9, 560.e-9],
                  "cyan": [455.e-9, 465.e-9, 475.e-9, 485.e-9, 495.e-9],
                  "UV": [375.e-9, 390.e-9, 400.e-9, 402.e-9, 405.e-9],
                  "yellow": [565.e-9, 570.e-9, 575.e-9, 580.e-9, 595.e-9],
                  "blue": [420.e-9, 430.e-9, 438.e-9, 445.e-9, 455.e-9],
                  "teal": [495.e-9, 505.e-9, 513.e-9, 520.e-9, 530.e-9],
                 }
    },
    affects: ["Andor SimCam"],
}

"SEM ExtXY": {
    class: simsem.SimSEM,
    role: null,
    init: {
           image: "songbird-sim-sem.h5", # any large 16 bit image is fine
#           drift_period: 5, # s, comment out to disable drift
    },
    children: {scanner: "EBeam ExtXY",
               detector0: "SED ExtXY",
               focus: "EBeam Focus",
    }
}

"EBeam ExtXY": {
    # Internal child of SimSEM, so no class
    role: e-beam,
    init: {},
    properties: {
        dwellTime: 10.e-6, # s
    },
    affects: ["SED ExtXY", "Andor SimCam"] # affects the CCD in case of cathodoluminescence
}

"SED ExtXY": { # aka ETD
    # Internal child of SimSEM, so no class
    role: se-detector,
    init: {},
}

"EBeam Focus": {
    # Internal child of SimSEM, so no class
    role: ebeam-focus,
}

"Nikon Super Duper": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 192.31}, # ratio to get the sim-ccd image to the right size
    affects: ["Andor SimCam"]
}

"MultiBand Fixed Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9], 
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Andor SimCam"]
}

# # Thorlabs FW102C with 6 filters
# "FW102C": {
#     class: tlfw.FakeFW102c,
#     role: filter,
#     init: {port: "/dev/ttyFTDI*", # will automatically find the right port
#            bands: {1: [420.e-9, 460.e-9], # pos -> m,m
#                    2: [500.e-9, 550.e-9], 
#                    3: [553.e-9, 577.e-9],
#                    4: [582.e-9, 636.e-9],
#                    5: [635.e-9, 675.e-9],
#                    6: [633.e-9, 1200.e-9]}, 
#            },
#     affects: ["Andor SimCam"]
# }


# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Andor SimCam": {
    class: andorcam2.FakeAndorCam2,
    role: ccd,
    init: {device: 0,
#            transp: [2, -1], # rotated 90Â° clockwise
           image: "songbird-sim-ccd.h5", # only for simulator
    },
}

"OLStage": {
    class: simulated.Stage,
    role: stage,
    init: {axes: [x, y]},
    affects: ["Andor SimCam", "EBeam ExtXY"],
    properties: {
        speed: {x: 0.1, y: 0.1} #m/s
    }
}

# Use 2 MultiplexActuators to separate the axes of the PIGCS over different roles
"SEM-Optical Alignment": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: ["Andor SimCam"],
    dependencies: {"a": PIGCS, "b": PIGCS},
    init: {
        axes_map: {"a": "a", "b": "b"},
#        inverted: ["a"]
    },
    properties: {
        speed: {'a': 0.001, 'b': 0.001} #m/s
    }
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)    
"OpticalZ actuator": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: ["Andor SimCam"],
    dependencies: {"z": PIGCS},
    init: {
        axes_map: {"z": "z"}
    },
    properties: {
        speed: {'z': 0.1} #m/s
    }
}

PIGCS: {
    class: pigcs.FakeBus,
    role: null,
    init: {
        port: "/dev/ttyPIGCS",
        # axis -> controller, channel, closed-loop?
        axes: {"a": [1, 1, False], "b": [2, 1, False], "z": [3, 1, False]},
    },
}


