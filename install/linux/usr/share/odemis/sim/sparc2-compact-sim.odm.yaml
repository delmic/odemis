# Configuration for the SPARC v2 Compact with an Analog PMT
"SPARCv2 Compact": {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector", "Optical Path Properties",
               "Lens1 Mover", "Lens2 Switch", "Calibration Light",
               "Calibration Camera",
               "CL Detector", "CL Selector", "CL Filter Wheel",
               "Mirror Actuators", "Mirror Actuators in XY referential",
               ],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: light.Light,
    role: brightlight,
    power_supplier: "Power Control Unit",
    affects: ["CL Detector", "Calibration Camera"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
#        port: "/dev/ttyPMT*",
        port: "/dev/fake", # for simulator
        pin_map: {"Calibration Light": 0,
                  "CL PMT control unit": 1,
                  "Optical Actuators": 2},
        delay: { # Time it takes before a component is accessible
            "Calibration Light": 0, # To turn on/off the light, it's immediate
            "CL PMT control unit": 0, # Actually just provide power to the  PMT
            "Optical Actuators": 1,
        },
        init: { # Which component to power on from the very beginning (to save time)
            "Optical Actuators": True
        },
    }
}

# # Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# # sudo modprobe comedi comedi_num_legacy_minors=4
# # sudo modprobe comedi_test
# # sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
# "SEM Scan Interface": {
#     class: semcomedi.SEMComedi,
#     role: null,
#     init: {device: "/dev/comedi0"},
#     # more detectors can be added, if necessary
#     children: {
#        scanner: "SEM E-beam",
#        detector0: "SEM Detector",
#     }
# }
# 
# # Connect:
# # X -> AO 0
# # Y -> AO 1
# # Ground -> AO GND
# "SEM E-beam": {
#     # Internal child of SEM ExtXY, so no class
#     role: e-beam,
#     init: {
#         channels: [1, 0],
#         limits: [[0, 5], [0, 5]],  # V
#         park: [0, 0], # V
#         settle_time: 5.e-6, # s
#         hfw_nomag: 0.25, # m
#     },
#     properties: {
#         scale: [8, 8], # (ratio) : start with a pretty fast scan
#         dwellTime: 10.e-6, # s
#         magnification: 100, # (ratio)
#     },
#     affects: ["SEM Detector", "Spectral Camera", "Spectrometer", "Calibration Camera"] # affects the CCD in case of cathodoluminescence
# }
# 
# # Must be connected on AI 0/AI GND
# "SEM Detector": { # aka ETD
#     # Internal child of SEM Scan Interface, so no class
#     role: se-detector,
#     init: {
#         channel: 0, # 0-> sawtooth waves, 1-> square waves
#         limits: [-3, 3] # V
#     },
# }

# This is a more realistic SEM simulator (image-wise, but less realistic HW-wise)
"SEM Scan Interface": {
    class: simsem.SimSEM,
    role: null,
    init: {
           drift_period: 5, # s  (disable to get a the whole resolution of the image)
           image: "sparc-etd-gold-balls.h5",
    },
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "CL PMT",
    }
}

"SEM E-beam": {
    # Internal child of SimSEM, so no class
    role: e-beam,
    init: {},
    properties: {
        dwellTime: 10.e-6, # s
    },
    affects: ["SEM Detector", "CL Detector", "Calibration Camera"]
}

"SEM Detector": { # aka ETD
    # Internal child of SimSEM, so no class
    role: se-detector,
    init: {},
}


# CL PMT: composed of the control unit + the PMT output connected to the DAQ board


"CL PMT": { # the raw detector of the PMT
    # Internal child of SEM Scan Interface, so no class
    role: null,
    init: {},
}

"CL PMT control unit": {
    class: pmtctrl.PMTControl,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        port: "/dev/fake",
        prot_time: 0.0002,  # s
        prot_curr: 20.e-6,  # A
    }
}

"CL Detector": {
    class: pmtctrl.PMT,
    role: cl-detector,
    init: {
        settle_time: 0.5,  # s, time for the gain to be fully active
    },
    dependencies: {
       "detector": "CL PMT",
       "pmt-control": "CL PMT control unit",
    },
}

# # In reality, this is a IDS uEye
# "Calibration Camera": {
#     class: ueye.Camera,
#     role: ccd,
#     init: {
#        device: null, # Any one found will do
#     },
# }

# For simulation, we use this component
"Calibration Camera": {
    class: andorcam2.AndorCam2,
    role: ccd,
    init: {
       device: "fake",
       image: "sparc-ar-mirror-align.h5", # only for simulator
    },
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Standard mirror config
    init: {
       mag: 0.31, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       # no pole_pos indicates it's not possible to do AR acquisition
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
       rotation: -1.570796326795, # rad, 90° rotation between optical axis and SEM Y axis
    },
    affects: ["CL Detector", "Calibration Camera"]
}

# Controller for the motors moving the various parts of the optical box
# DIP must be configured with address 2 (= 0100000)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        #port: "/dev/ttyTMCM*",
        port: "/dev/fake6",
        #address: 2,
        address: null,
        axes: ["l1", "l2", "cl-sel", "fw"],
        # These values are adapted to make the simulator roughly the same speed
        ustepsize: [25.1e-9, 25.1e-9, 26.1e-9, 3.392e-5], # m/µstep... rad/µstep
        refproc: "Standard",
        refswitch: {"l1": 0, "l2": 0, "cl-sel": 4, "fw": 4},
        inverted: ["l2"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        FAV_POS_ACTIVE: {"x": -0.0045} # m
    },
    affects: ["Lens2 Switch"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            -4.e-3: "on",
            -0.02: "off", # completely out of the path
        },
    },
    affects: ["CL Detector", "Calibration Camera"],
}

# Mirror in Plate 2, selects between spectrometer and cl-detector
"CL Selector": {
    class: actuator.FixedPositionsActuator,
    role: "cl-det-selector",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "cl-sel",
        positions: {
            0.00123453: ["CL Detector"],
            0.0088107: ["Calibration Camera"]
        },
    },
    affects: ["CL Detector", "Calibration Camera"],
}

# S/N 20151117001
"CL Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: "cl-filter",
    dependencies: {"band": "Optical Actuators"},
    init: {
        axis_name: "fw",
        # It supports up to 8 filters
        positions: {
            # pos (rad) -> m,m
            0.3392:  "pass-through",           # 1
            1.1245981634:  [0, 400.e-9],       # 2
            1.90999632679: [425.e-9, 475.e-9], # 3
            2.69539:       "Blue",             # 4
            3.48079:       "Green",            # 5
            4.26619081699: "Red",              # 6
            5.05159:       [625.e-9, 675.e-9], # 7
            5.83699:       [675.e-9, 725.e-9], # 8
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
    affects: ["CL Detector"],
}


# Controller for moving the 'Redux' stage
# Note: the S axis can _only_ be moved when the l axis is near the active/engaged position
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/fake6",
        address: null,
        #port: "/dev/ttyTMCM*",
        #address: 4,
        axes: ["s", "l"],
        ustepsize: [1.e-6, 1.e-6], # m/µstep (big, for the simulator to move fast)
        refproc: "Standard",
        refswitch: {"s": 0, "l": 0},
    },
    metadata: {
        # Default position of the mirror engaged (will be improved during alignment)
        FAV_POS_ACTIVE: {"l": 70.e-3, "s": 5.e-3},  # m, m
    },
}

# Internal component to convert between the referential of the mirror actuators
# and the X/Y referential of the SEM. Used by the mirror alignment functions.
"Mirror Actuators in XY referential": {
    class: actuator.ConvertStage,
    role: "mirror-xy",
    dependencies: {"orig": "Mirror Actuators"},
    init: {
        axes: ["l", "s"], # mapped respectively to X, Y
        rotation: -1.0471975511965976, # rad (= 60°)
        # Note: if you want to use absolute moves, add a "translation" too
    },
}
