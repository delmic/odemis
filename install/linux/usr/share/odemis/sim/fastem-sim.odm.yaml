# Minimal configuration file to start the Fast-EM GUI
FASTEM-sim: {
    class: Microscope,
    role: mbsem,
    children: ["MultiBeam Scanner XT", "EBeam Focus", "EBeam Detector",
               "Sample Stage",
               "Stage Fine Position", "Metrology Module",
               "Beam Shift Controller", "Focus Tracker",
               "Detector Rotator", "Optical Objective",
               "Diagnostic Camera",
               ],
}

"SEM": {
    class: simsem.SimSEM,
    role: null,
    init: {
        image: "simsem-fake-output.h5", # any large 16 bit image is fine
    },
    children: {
        scanner: "MultiBeam Scanner XT",
        focus: "EBeam Focus",
        detector0: "EBeam Detector", # simsem needs detector0 child
    }
}

"MultiBeam Scanner XT": {
    # Internal child of SEM, so no class
    role: e-beam,
    init: {},
    properties: {
        dwellTime: 1.e-6, # s
    },
}

"EBeam Focus": {
    # Internal child of SEM, so no class
    role: ebeam-focus,
}

"EBeam Detector": { # aka ETD or secondary electron detector
    # Internal child of SEM, so no class
    role: se-detector,
    init: {},
    metadata: {
        # Compensation to the pixel size (ie, the FoV) needed to have a good match between
        # stage movement and SEM image *AT LOW MAGNIFICATIONS*.
        # This is useful for the overview image acquisition.
        PIXEL_SIZE_COR: [1.05, 1.05], # ratio
    },
    persistent: {
        metadata: [PIXEL_SIZE_COR],
    },
}

# This is in the "global coordinates", but with X/Y inverted, so that the position
# corresponds to the sample at the center of the e-beam FoV.
"Sample Stage": {
    class: piezomotor.PMD401Bus,
    role: stage,
    init: {
        port: "/dev/fake",
        axes: {
            'x': {
                axis_number: 1,
                speed: 0.001, # m/s
                closed_loop: True,
                range: [-25.5e-3, 25.5e-3],  # m
                },
            'y': {
                axis_number: 2,
                speed: 0.001, # m/s
                closed_loop: True,
                range: [-25.5e-3, 25.5e-3],  # m
            },
            'z': {
                axis_number: 3,
                speed: 0.00002, # m/s
                closed_loop: True,
                range: [-150e-6, 150e-6],  # m
            },
        },
        inverted: ["x"],
    },
    metadata: {
      # X/Y: position of the scintillators
      # Z: useful range for the (auto) focus
      POS_ACTIVE_RANGE: {"x": [-25.e-3, 25.e-3], "y": [-25.e-3, 25.e-3], "z": [-85.e-6, 5.e-6]}, # m, min/max
      FAV_POS_ACTIVE: {"z": -40.e-6}  # [m] Estimate for good focus position
    },
    affects: ["Diagnostic Camera", "MultiBeam Scanner XT"]
}

# metrology module (MM) measures position of stage with 3 position sensors
"Metrology Module": {
    class: smaract.Picoscale,
    role: null,
    init: {
        locator: "fake",
        channels: {"x1": 0, "y1": 1, "y2": 2},
        ref_on_init: "if necessary",  # use "always" to force referencing at init
    },
}

# Wrapper component for metrology module (MM):
# maps two channels into one to measure x axis and rotation; y is mapped to y
"Stage Fine Position": {
    class: actuator.DualChannelPositionSensor,
    role: stage-pos,
    dependencies: {"sensor": "Metrology Module"},
    init: {
        channels: {"x": "x1", "y": ["y1", "y2"]},
        distance: 0.1, # (m)
    },
}

# controls the ebeam shift via an external interface (RS485 cable)
"Beam Shift Controller": {
    class: tfsbc.BeamShiftController,
    role: ebeam-shift,
    init: {
        port: "/dev/fake",
        serialnum: FT43FD2D,
    },
    affects: ["EBeam Scanner", "MultiBeam Scanner"],
}

"Focus Tracker": {
    class: focustracker.FocusTrackerCO,
    role: focus-pos,
    init: {
        node_idx: 0x10,
        channel: 'fake',
    },
}

# rotates the IADOM (in-air detector optics module) and thus the mppc
# via the k-mirror (part of the IADOM)
# only rotations in the range of [-2pi, 2pi]
"Detector Rotator": {
    class: tmcm.CANController,
    role: det-rotator,
    init: {
        channel: "fake",
        node_id: 1,
        datasheet: "TMCM-1240_CANopen_V322.dcf",  # not used in simulator
        axes: ["rz"],
        refproc: "Standard",
        #param_file: "/usr/share/odemis/tmcm-pd1240.tmcc.tsv", # don't use in simulator
        ustepsize: [3.272492347489e-6], # 2 PI / (200 steps/turn * 256 Âµsteps/step * 75 gear-ratio * 0.5 image rotation per physical rotation)
        unit: ["rad"],
        rng: [[-6.3, 6.3]],  # allow full turn (2 * PI) in either direction
        inverted: {'rz'},
    },
    affects: ["Diagnostic Camera"],
}

# set the optical path magnification and thus compute the pixel size of the diagnostic camera.
"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {mag: 40}, # ratio, magnifying
    affects: ["Diagnostic Camera"]
}

# diagnostic detector to monitor the multiprobe pattern
# TODO this is now a static image and does not simulate any scanning movement
# executed with the SAM
"Diagnostic Camera": {
    class: simcam.Camera,
    role: diagnostic-ccd,
    init: {
        image: "../acq/align/test/multiprobe01.tiff",
    },
}
