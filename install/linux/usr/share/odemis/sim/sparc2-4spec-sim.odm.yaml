# Configuration of an hypothetical "Mega" SPARC v2, with 4 spectrometers (the maximum supported for now)
# * One "integrated" spectrograph, with 2 cameras
# * One "external" spectograph, connected via optical fiber, with 2 cameras

SPARC2-4Spec: {
    class: Microscope,
    role: sparc2,
    children: ["SEM E-beam", "SEM Detector", "Calibration Light",
               "Optical Path Properties", "Slit", "Lens1 Mover", "Lens2 Switch",
               "Fiber align", "Spectrometer Selector",
               "Integrated Spectrograph", "Int Spectrograph focus", "Int Spec Filter Wheel", "Int Spec CCD Flipper",
               "AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1",
               "External Spectrograph", "Ext Spectrograph focus", "Ext Spec CCD Flipper",
               "Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3",
               "Mirror Actuators", "Mirror Actuators in XY referential",
               "Scan Stage", "Sample Stage", "EBIC",
               ],
}

# Light (lamp with known spectrum)
"Calibration Light": {
    class: light.Light,
    role: "brightlight",
    power_supplier: "Power Control Unit",
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1",
              "Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
}

"Power Control Unit": {
    class: powerctrl.PowerControlUnit,
    role: "power-control",
    init: {
#        port: "/dev/ttyPMT*",
        port: "/dev/fake", # for simulator
        pin_map: {
            "AR Camera": 0,
            "Integrated Spectrograph": 2,
            "Optical Actuators": 4,
            "Spec Camera 1": 5,
            "Calibration Light": 6,
        },
        delay: { # Time it takes (in s) before a component is accessible
            "Calibration Light": 1, # To turn on/off the light, with most bulbs it's very fast
            "AR Camera": 1,
            "Spec Camera 1": 1,
            "Integrated Spectrograph": 3, # SR-193 needs a looong time to initialise
            "Optical Actuators": 2,
        },
        init: { # Which component to power on from the very beginning (to save time)
            "Calibration Light": True, # turn if on initially, to warm up. It will automatically be off when the component starts
            "AR Camera": True,
            "Spec Camera 1": True,
            "Integrated Spectrograph": True,
            "Optical Actuators": True
        },
    }
}

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {
       scanner: "SEM E-beam",
       detector0: "SEM Detector",
       detector1: "EBIC",
    }
}

# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM Scan Interface, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [-2.5, -2.5], # V
        # TODO: Adapt based on the image ratio. This is for a 4:3 image.
        # For a 1:1 ratio, use 4096, 4096.
        #max_res : [5120, 3840], # px
        # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        scanning_ttl: {1: [True, "external"], 4: True}, # output ports -> True (indicate scanning) or False (indicate parked)
        settle_time: 10.e-6, # s
        hfw_nomag: 0.1285, # m
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 100, # (ratio)
    },
    affects: ["SEM Detector",  # affects the CCDs in case of cathodoluminescence
              "AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1",
              "Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
}

# Must be connected on AI 0/AI GND
"SEM Detector": { # aka ETD
    # Internal child of SEM Scan Interface, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

# In either configuration, the signal is either ±10V or ±5V. As the signal can be positive and negative, is uses the full range.
# Must be connected on AI 2/AI 10 (differential)
"EBIC": {
    role: ebic-detector,
    init: {
        channel: 2,
        limits: [-10, 10], # V
    },
}

"Scan Stage": { # wrapper to be able to scan with the stage instead of the e-beam
    class: actuator.MultiplexActuator,
    role: scan-stage,
    dependencies: {"x": "Sample Stage", "y": "Sample Stage"},
    init: {
        axes_map: {"x": "x", "y": "y"},
    },
#    properties: {
#        speed: {"x": 100.e-6, "y": 100.e-6},
#    },
    metadata: {
        POS_ACTIVE_RANGE: {"x": [-5.0e-3, 5.0e-3], "y": [-5.0e-3, 5.0e-3]},
    },
    affects: ["Sample Stage"],
}

"Sample Stage": {
    class: simulated.Stage,
    role: sem-stage,
    init: {
        axes: ["x", "y"],
        ranges: {"x": [-0.014, 0.014], "y": [-0.028, 0.028]},
    },
    properties: {
        speed: {"x": 0.01, "y": 0.01}, # m/s
    },
    affects: ["SEM E-beam"],
}

"Optical Path Properties": {
    class: static.OpticalLens,
    role: lens,
    # Standard mirror config
    init: {
       mag: 0.31, # ratio
       na: 0.2, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
       pole_pos: [1085, 1105], # (px, px), position of the pole (aka the hole in the mirror)
       x_max: 13.25e-3,  # m, the distance between the parabola origin and the cutoff position
       hole_diam: 0.6e-3,  # m, diameter the hole in the mirror
       focus_dist: 0.5e-3,  # m, the vertical mirror cutoff, iow the min distance between the mirror and the sample
       parabola_f: 2.5e-3,  # m, parabola_parameter=1/4f
       rotation: -1.570796326795, # rad, 90° rotation between optical axis and SEM Y axis
    },
    persistent: {
        properties: [polePosition],
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1",
              "Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"]
}

# Controller for the motors moving the various parts of the optical box
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    power_supplier: "Power Control Unit",
    init: {
        #port: "/dev/ttyTMCM*",
        port: "/dev/fake6",
        #address: 2,
        address: null,
        axes: ["l1", "l2", "spec-sel", "fiby", "slit"],
        # These values are adapted to make the simulator roughly the same speed
        ustepsize: [25.1e-9, 25.1e-9, 26.1e-9, 5.86e-9, 5.e-9], # m/µstep
        unit: ["m", "m", "m", "m", "m"],
        refproc: "Standard",
        refswitch: {"l1": 0, "l2": 0, "spec-sel": 4}, # fiby has no ref swich
        inverted: ["l2"],
    },
}

# The first lens of Plate 1, able to move along the whole range
"Lens1 Mover": {
    class: actuator.MultiplexActuator,
    role: "lens-mover",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "l1"},
        ref_on_init: ["x"],
    },
    metadata: {
        # Default position of the lens (can be improved by user)
        FAV_POS_ACTIVE: {"x": 0.0045} # m
    },
    persistent: {
        metadata: [FAV_POS_ACTIVE],
    },
    affects: ["Lens2 Switch"],
}

# The second lens of Plate 1, either to working or parking position
"Lens2 Switch": {
    class: actuator.FixedPositionsActuator,
    role: "lens-switch",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "l2",
        positions: {
            -4.e-3: "on",
            -0.02: "off", # completely out of the path
        },
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1",
              "Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"]
}

# Control the slit position to either fully-open or small (dependent on the spectrometer slit-in)
"Slit": {
    class: actuator.FixedPositionsActuator,
    role: "slit-in-big",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axis_name: "slit",
        positions: {
            0: "on", # fully opened
            0.0012: "off", # opening based on the small slit
        },
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1"],
}

# Note that the next two components actually move the _same_ axis!
# Mirror & Lens in Plate 2, to change X&Y of fiber alignment
"Fiber align": {
    class: actuator.MultiplexActuator,
    role: "fiber-aligner",
    dependencies: {"x": "Optical Actuators", "y": "Optical Actuators"},
    init: {
        axes_map: {"x": "spec-sel", "y": "fiby"},
    },
    metadata: {
        # Default Y position of the aligner (can be improved by user)
        # X position is on the Spectrometer Selector
        FAV_POS_ACTIVE: {"y": 0.000372989} # m
    },
    persistent: {
        metadata: [FAV_POS_ACTIVE],
    },
    affects: ["Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
}

# Mirror in Plate 2, selects between integrated spectrometer and external spectrometer
"Spectrometer Selector": {
    class: actuator.MultiplexActuator,
    role: "spec-selector",
    dependencies: {"x": "Optical Actuators"},
    init: {
        axes_map: {"x": "spec-sel"},
        ref_on_init: ["x"],
    },
    metadata: {
        # TODO: could we have the affects just as "Int Spec CCD Flipper" / "Ext Spec CCD Flipper"?
        # Position of the mirror to select the external spectrometer (can be improved by user)
        FAV_POS_ACTIVE: {"x": 0.026112848}, # m
        FAV_POS_ACTIVE_DEST: ["Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
        FAV_POS_DEACTIVE: {"x": 0.022}, # m
        FAV_POS_DEACTIVE_DEST: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1"], # m
    },
    persistent: {
        metadata: [FAV_POS_ACTIVE],
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1",
              "Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
}

# Internal Spectrograph = Kymera 193 (+ 2 cameras)
"Integrated Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph,
    power_supplier: "Power Control Unit",
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
        bands: { # The filters in the filter-wheel
            1: "pass-through",
            2: [780.e-9, 820.e-9], # pos -> m,m
            3: [530.e-9, 570.e-9],
            4: [580.e-9, 620.e-9],
            5: [630.e-9, 670.e-9],
            6: [430.e-9, 470.e-9],
        },
        fstepsize: 30.e-6, # m, size of one focus step
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1"],
}

"Int Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: "focus",
    dependencies: {"z": "Integrated Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1"],
}

# Provide the filter wheel of the spectrograph as a separate component
"Int Spec Filter Wheel": {
    class: actuator.MultiplexActuator,
    role: filter,
    dependencies: {"band": "Integrated Spectrograph"},
    init: {
        axes_map: {"band": "band"},
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1"],
}

# Provide the mirror (aka port selector) of the spectrograph as a separate component
"Int Spec CCD Flipper": {
    class: actuator.FixedPositionsActuator,
    role: "spec-det-selector",
    dependencies: {"rx": "Integrated Spectrograph"},
    init: {
        axis_name: "flip-out",
        positions: {
            0: ["AR Camera", "Int Spectrometer 0"],
            1.5707963267948966: ["Spec Camera 1", "Int Spectrometer 1"],
        },
    },
    affects: ["AR Camera", "Int Spectrometer 0", "Spec Camera 1", "Int Spectrometer 1"],
}

# In reality, this is a Zyla, but you need libandor3-dev to simulate an AndorCam3
"AR Camera": {
    class: andorcam2.AndorCam2,
    role: ccd0,
    power_supplier: "Power Control Unit",
    init: {
       device: "fake",
       image: "sparc-ar.h5", # only for simulator
    },
}

"Int Spectrometer 0": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer0,
    dependencies: {detector: "AR Camera", spectrograph: "Integrated Spectrograph"},
    init: {
        transp: [1, 2], # only applied to the spectrometer data (not raw CCD)
    },
    properties: {
        binning: [4, 16],
    },
}

"Spec Camera 1": {
    class: andorcam2.AndorCam2,
    role: sp-ccd1,
    power_supplier: "Power Control Unit",
    init: {
       device: "fake",
       image: "sparc-spec-sim.h5", # only for simulator
    },
}

"Int Spectrometer 1": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer1,
    dependencies: {detector: "Spec Camera 1", spectrograph: "Integrated Spectrograph"},
    init: {
        transp: [1, 2], # only applied to the spectrometer data (not raw CCD)
    },
    properties: {
        binning: [4, 16],
    },
}

# External Spectrograph
"External Spectrograph": {
    class: andorshrk.Shamrock,
    role: spectrograph-dedicated,
    init: {
        device: "fake",
        slits: {1: "slit-in", # INPUT_SIDE
        },
        # No filter wheel
        fstepsize: 30.e-6, # m, size of one focus step
    },
    affects: ["Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
}

"Ext Spectrograph focus": {
    class: actuator.MultiplexActuator,
    role: spec-ded-focus,
    dependencies: {"z": "External Spectrograph"},
    init: {
        axes_map: {"z": "focus"},
    },
    affects: ["Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
}

# Provide the mirror (aka port selector) of the spectrograph as a separate component
"Ext Spec CCD Flipper": {
    class: actuator.FixedPositionsActuator,
    role: spec-ded-det-selector,
    dependencies: {"rx": "External Spectrograph"},
    init: {
        axis_name: "flip-out",
        positions: {
            0: ["Spec Camera 2", "Ext Spectrometer 2"],
            1.5707963267948966: ["Spec Camera 3", "Ext Spectrometer 3"],
        },
    },
    affects: ["Spec Camera 2", "Ext Spectrometer 2", "Spec Camera 3", "Ext Spectrometer 3"],
}

"Spec Camera 2": {
    class: andorcam2.AndorCam2,
    role: sp-ccd2,
    init: {
        #device: 0,
        device: "fake",
        transp: [-1, 2], # if mirrored on X axis
        image: "sparc-spec-sim.h5", # only for simulator
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

"Ext Spectrometer 2": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer2,
    dependencies: {detector: "Spec Camera 2", spectrograph: "External Spectrograph"},
    properties: {
        binning: [4, 1],
    },
}

"Spec Camera 3": {
    class: andorcam2.AndorCam2,
    role: sp-ccd3,
    init: {
        #device: 0,
        device: "fake",
        transp: [-1, 2], # if mirrored on X axis
        image: "sparc-spec-sim.h5", # only for simulator
    },
    properties: {
        targetTemperature: -60, # °C
    },
}

"Ext Spectrometer 3": {
    class: spectrometer.CompositedSpectrometer,
    role: spectrometer3,
    dependencies: {detector: "Spec Camera 3", spectrograph: "External Spectrograph"},
    properties: {
        binning: [4, 100],
    },
}

# Controller for moving the 'Redux' stage
# Note: the S axis can _only_ be moved when the l axis is near the active/engaged position
"Mirror Actuators": {
    class: tmcm.TMCLController,
    role: "mirror",
    init: {
        port: "/dev/fake6",
        address: null,
        #port: "/dev/ttyTMCM*",
        #address: 4,
        axes: ["l", "s"],
        ustepsize: [1.e-6, 1.e-6], # m/µstep (big, for the simulator to move fast)
        rng: [[0, 51.e-3], [-1.5e-3, 1.5e-3]],  # m, min/max
        refproc: "Standard",
        refswitch: {"s": 0, "l": 0},
    },
    metadata: {
        # Default position of the mirror engaged (will be improved during alignment)
        FAV_POS_ACTIVE: {"l": 40.e-3, "s": 1.e-3},  # m, m
    },
    persistent: {
        metadata: [FAV_POS_ACTIVE],
    },
}

# Internal component to convert between the referential of the mirror actuators
# and the X/Y referential of the SEM. Used by the mirror alignment functions.
"Mirror Actuators in XY referential": {
    class: actuator.ConvertStage,
    role: "mirror-xy",
    dependencies: {"orig": "Mirror Actuators"},
    init: {
        axes: ["l", "s"], # mapped respectively to X, Y
        rotation: 0.07330382 # rad (= 4.2°)
    },
}
