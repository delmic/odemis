# Configuration to use just a Nikon C2
ConfocalFluo: {
    class: Microscope,
    role: optical,
    children: ["Light", "Optical Objective", "Optical Emission Filter",
               "Galvano Mirror", "PMT1 @ 447/60", "PMT2 @ 525/50", "PMT3 @ 561LP", "Pinhole",
               "Sample Stage", "Objective Stage", "Optical Focus"]
}

# We cannot control the power of the laser by software. At best, it could be 
# possible to turn it on/off _if it's set to use the external clock_ by setting the
# trigger frequency to 0. So for now, just a simulated component, to make Odemis
# happy, and to be able to store the actual power used in the metadata.
Light: {
    class: simulated.Light,
    role: light,
    init: {
        max_power: 0.5, # W
        # generated wavelength -> 99% low, 25% low, centre, 25% high, 99% high in m
        spectra: [[475.0e-9, 580.0e-9, 485.0e-9, 490.0e-9, 495.0e-9]] # m
    },
    affects: ["PMT1 @ 447/60", "PMT2 @ 525/50", "PMT3 @ 561LP"],
}


# Quanta SEM driven via external X/Y connection, using a DAQ board
"Nikon C2": {
    class: nikonc.CorbaC2,
    role: null,
    init: {
        host: "fake", # Use "fake" to use a simulator
        port: 6666,
    },
    # detectors can be added or removed, up to 4
    children: {
        scanner: "Galvano Mirror",
        detector0: "PMT1 @ 447/60",
        detector1: "PMT2 @ 525/50",
        detector2: "PMT3 @ 561LP",
        pinhole: "Pinhole",
    }
}

"Galvano Mirror": {
    # Internal child of Nikon C2, so no class
    role: laser-mirror,
    init: {
        hfw_nomag: 10.0e-3,  # m # The horizontal field of view if the lens is 1x
        #galvano_enabled: False,  # When "False", everything will behave the same
                                 # in software but the mirror will not move. 
    },
    properties: {
        scale: [8, 8], # (ratio), start with a pretty fast scan
        resolution: [256, 256],
    },
    affects: ["PMT1 @ 447/60", "PMT2 @ 525/50", "PMT3 @ 561LP"] # affects the CCD in case of cathodoluminescence
}

# The light goes first through a dichroic mirror

"PMT1 @ 447/60": {
    # Internal child of Nikon C2, so no class
    role: photo-detector0,
    init: {
        channel: 0,
    },
    metadata: {
        OUT_WL: [417.0e-9, 477.0e-9], # m
    }
}

"PMT2 @ 525/50": {
    # Internal child of Nikon C2, so no class
    role: photo-detector1,
    init: {
        channel: 1,
    },
    metadata: {
        OUT_WL: [500.e-9, 550.e-9], # m
    }
}

"PMT3 @ 561LP": {
    # Internal child of Nikon C2, so no class
    role: photo-detector2,
    init: {
        channel: 2,
    },
    metadata: {
        OUT_WL: [561.e-9, 1361.e-9], # m
    }
}

"Pinhole": {
    # Internal child of Nikon C2, so no class
    role: pinhole,
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {
       mag: 100.0, # ratio, (actually of the complete light path)
       na: 0.95, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
    },
    affects: ["Galvano Mirror"]
}

"Optical Emission Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[430.e-9, 480.e-9], [520.e-9, 600.e-9]]}, # m,m
    affects: ["PMT1 @ 447/60", "PMT2 @ 525/50", "PMT3 @ 561LP"]
}

"Sample Stage": {
    class: simulated.Stage,
    role: stage,
    init: {axes: ["x", "y"]},
    affects: ["Galvano Mirror"],
    properties: {
        speed: {'x':0.1, 'y':0.1} #m/s
    }
}

# Use 2 MultiplexActuators to separate the axes of the PIGCS over different roles
"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: ["Galvano Mirror"],
    dependencies: {"x": "Optical Stage", "y": "Optical Stage"},
    init: {
        axes_map: {"x": "x", "y": "y"},
    },
    properties: {
        speed: {'x': 0.1, 'y': 0.1} #m/s
    }
}

"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: ["Galvano Mirror"],
    dependencies: {"z": "Optical Stage"},
    init: {
        axes_map: {"z": "z"}
    },
    properties: {
        speed: {'z': 0.1} #m/s
    }
}

"Optical Stage": {
    class: simulated.Stage,
    role: null,
    init: {axes: ["x", "y", "z"]},
}
