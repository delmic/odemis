# This microscope file uses simplified simulated stage and not the realistic one.
# The acquisition can be performed either with a real microscope or with a Tescan simulator
# using the host info in the init section of the Tescan FIBSEM.

"METEOR-FIBSEM-Sim": {
    class: Microscope,
    role: meteor,
}

# Connects to Tescan FIBSEM via SharkSEM
"Tescan FIBSEM": {
    class: tescan.SEM,
    role: fibsem,
    init: {
        host: "192.168.56.101",
        port: 8300
    },
    children: {
        stage: "Stage",
        scanner: "EBeam Scanner",
        detector0: "EBeam Detector",
        focus: "EBeam Focus",
        fib-scanner: "Ion Scanner",
        fib-detector: "Ion Detector",
        light: "Chamber Light"
    }
}

"EBeam Scanner": {
    # Internal child of Tescan, so no class
    role: e-beam,
    init: {
        fov_range: [196.e-9, 25586.e-6]
    },
}

"EBeam Detector": {
    role: se-detector,
    init: {
        channel: 0,
        detector: "e-t",
    },
}

"EBeam Focus": {
    role: ebeam-focus,
    init: {axes: [z]},
    affects: ["EBeam Scanner"]
}

# FIB specific components
"Ion Scanner": {
    role: ion-beam,

    init: {
        fov_range: [196.e-9, 25586.e-6]
    },
}

"Ion Detector": {
    role: se-detector-ion,

    init: {
        channel: 0,
        detector: "se",
    },
}

# With calibration values for sample stage
"Stage": {
    class: tmcm.TMCLController,
    role: stage-bare,
    init: {
        port: "/dev/fake6",
        address: null,
        axes: ["x", "y", "z", "rx", "rz"],
        ustepsize: [1.e-7, 1.e-7, 1.e-7, 1.2e-5, 1.2e-5], # unit/µstep
        rng: [[ -50.e-3, 50.e-3 ],
              [ -50.e-3, 50.e-3 ],
              [ 0, 94.e-3 ],
              [ -0.4363323129985824, 1.0122909661567112 ],
              [ -6.283185307179586, 6.283185307179586 ]
        ],
        unit: ["m", "m", "m", "rad", "rad"],
        refproc: "Standard",
    },
    metadata: {
        # Loading position:
        FAV_POS_DEACTIVE: {
            'rx': 0.0,
            'rz': -1.0471975511965976,
            'x': -30.e-3,
            'y': -40.e-03,
            'z': 45.e-3
        },
        # XYZ ranges for SEM & METEOR (FM imaging range should perfectly match the POS_ACTIVE_RANGE metadata of the "Meteor Stage" component!),
        # Z range is based on centering a sample at the FIB/SEM coincident point at a Z coordinate of ~ 30 mm:
        SEM_IMAGING_RANGE: {
            "x": [-13.e-3, 7.e-3],
            "y": [-20.e-3, 20.e-3],
            "z": [28.e-3, 38.e-3]  # NOTE: increased max z, since grid 1 center was outside
        },
        FM_IMAGING_RANGE: {
            "x": [44.e-3, 55.e-3],
            "y": [-23.e-3, 3.e-3],
            "z": [28.e-3, 32.e-3]
        },
        # Grid centers in SEM range, at rx = FAV_SEM_POS_ACTIVE,
        # These values are based on the expectation from the CAD model. Recalibrate for each system:
        SAMPLE_CENTERS: {
            "GRID 1": {
                'x': -2.611e-3,
                'y': -13.540e-3,
                'z': 35.651e-3
            },
            "GRID 2": {
                'x': 1.389e-3,
                'y': -13.540e-3,
                'z': 35.651e-3
            }
        },
        # Calibrated values used for the SEM/FM switching behaviour
        CALIB: {
            "version": "tescan_1",
            # These three values were only present in the original meteor-tescan file.
            "x_0": 3.577e-3,
            "y_0": -0.164e-3,
            "z_ct": 4.561291055e-3,
            # The following parameters were both present at the original meteor-tescan and tfs3 file, with the exception
            # of pre-tilt.
            "dx": 40.419e-3,
            "dy": 0.268e-3,
            "b_y": -0.400216e-3,
            "pre-tilt": 0.698132,
            "use_linked_sem_focus_compensation": false,
        },
        # Active tilting (T/rx) & rotation (R/rz) angles positions when switching between SEM & FM.
        # Calibrate for each system, and make sure the difference in rz between FM and SEM is exactly 180°
        # The values are in radians. Please also update the values in degrees as written in the comments.
        # Note that the rz range in the TESCAN software is between -170° and 40°
        # Change the SEM tilt angle to a value that matches the customer's needs
        # Note that the accuracy of the FM/SEM switch might be reduced if starting at a different angle.
        FAV_FM_POS_ACTIVE: {"rx": 0.261799, "rz": -1.326450}, # 15° tilt, -76° rotation
        FAV_SEM_POS_ACTIVE: {"rx": 0.698132, "rz": 1.815142}, # 40° tilt, 104° rotation
        FAV_MILL_POS_ACTIVE: {"rx": 0.261799, "rz": -1.326450}, # 15° tilt, -76° rotation (same as FM)
    },
}

# (IR) light for the SEM chamber
"Chamber Light": {
    role: chamber-light,
    init: {},
    affects: ["Chamber Cam"],
}

"Light Source": {
    class: omicronxx.HubxX,
    role: light,
    init: {
        port: "/dev/fakehub", # Simulator
        # port: "/dev/ttyFTDI*",
    },
    affects: ["Camera"],
}

"Linked YZ": {
    class: actuator.ConvertStage,
    role: null,
    dependencies: {
        "under": "Stage"
    },
    init: {
        axes: [ "y", "z" ], # name of the axes in the dependency, mapped to x,y (if identity transformation)0.4663076582 1.103377919
        rotation: 0.523598775, # rad , 30° (should be equal to the pre-tilt angle of the shuttle being used) NOTE:
        shear: [-0.4663076582, 0], # [-tan(rx_fm), 0], where rx_fm is equal to rx in FAV_FM_POS_ACTIVE 0.2679491924311227
        scale: [1, 1.103377919] # [1, 1/cos(rx_fm)], where rx_fm is equal to rx in FAV_FM_POS_ACTIVE 1.035276180410083
        #inverted: ["z"],
    },
}

"Meteor Stage": {
    class: actuator.MultiplexActuator,
    role: stage,
    dependencies: { "x": "Stage", "y": "Linked YZ", "z": "Linked YZ"},
    init: {
        axes_map: { "x": "x", "y": "x", "z": "y"},
    },
    affects: ["Camera", "EBeam Scanner"],
    metadata: {
        # Should match exactly the FM imaging range metadata for the "Stage" component!
        POS_ACTIVE_RANGE: {"x": [-44.e-3, -24.e-3], "y": [-0.04, 0.04]}
    },
}

# Normally a IDS uEye or Zyla
# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Camera": {
    class: simcam.Camera,
    role: ccd,
    dependencies: {focus: "Optical Focus"},
    init: {
        image: "andorcam2-fake-clara.tiff",
        transp: [-1, 2], # To swap/invert axes
    },
    metadata: {
        # To change what the "good" focus position is on the simulator
        # It's needed for not using the initial value, which is at deactive position.
         FAV_POS_ACTIVE: {'z': 1.7e-3},  # good focus position
         ROTATION: -0.099484,  # [rad] (=-5.7°)
    },
}

# Controller for the filter-wheel
# DIP must be configured with address 7 (= 1110000)
"Optical Actuators": {
    class: tmcm.TMCLController,
    role: null,
    init: {
        port: "/dev/fake6", # Simulator
        address: null, # Simulator
        axes: ["fw"],
        ustepsize: [1.227184e-6], # [rad/µstep]
        rng: [[-14, 7]], # rad, more than 0->2 Pi, in order to allow one extra rotation in both direction, when quickly switching
        unit: ["rad"],
        refproc: "Standard",
        refswitch: {"fw": 0}, #digital output used to switch on/off sensor
        inverted: ["fw"], # for the filter wheel, the direction doesn't matter, as long as the positions are correct
    },
}

"AntiBacklash for Filter Wheel": {
    class: actuator.AntiBacklashActuator,
    role: null,
    init: {
        backlash: {
            # Force every move to always finish in the same direction
            "fw": 50.e-3,  # rad
        },
    },
    dependencies: {"slave": "Optical Actuators"},
}

"Filter Wheel": {
    class: actuator.FixedPositionsActuator,
    role: filter,
    dependencies: {"band": "AntiBacklash for Filter Wheel"},
    init: {
        axis_name: "fw",
        # This filter-wheel is made so that the light goes through two "holes":
        # the filter, and the opposite hole (left empty). So although it has 8
        # holes, it only supports 4 filters (from 0° to 135°), and there is no
        # "fast-path" between the last filter and the first one.
        positions: {
             # pos (rad) -> m,m
             0.08: [414.e-9, 450.e-9], # FF01-432/36
             0.865398: [500.e-9, 530.e-9], # FF01-515/30
             1.650796: [579.5e-9, 610.5e-9], # FF01-595/31
             2.4361944: [663.e-9, 733.e-9], # FF02-698/70
        },
        cycle: 6.283185, # position of ref switch (0) after a full turn
    },
    # TODO: a way to indicate the best filter to use during alignement and brightfield? via some metadata?
    affects: ["Camera"],
}

# CLS3252dsc-1
"Optical Focus": {
    class: smaract.MCS2,
    role: focus,
    init: {
        locator: "fake",
        ref_on_init: True,
        # TODO: check speed/accel
        speed: 0.003,  # m/s
        accel: 0.003,  # m/s²
        #hold_time: 5 # s, default = infinite
        # TODO: check the ranges, and the channel
        axes: {
            'z': {
                # -11.5mm is safely parked (FAV_POS_DEACTIVE)
                # 1.7mm is typically in focus (FAV_POS_ACTIVE)
                range: [-15.e-3, 5.e-3],
                unit: 'm',
                channel: 0,
            },
        },
    },
    metadata: {
        # Loading position to retract lens
        FAV_POS_DEACTIVE: {'z': -11.5e-3},
        # Initial active position (close from the sample, but not too close, for safety)
        FAV_POS_ACTIVE: {'z': 1.69e-3}
    },
    affects: ["Camera"],
}
