import numpy

from odemis.util.transform import (
    AffineTransform,
    ScalingTransform,
    SimilarityTransform,
    RigidTransform,
)

T0 = numpy.array([0, 0])
TX = numpy.array([1, 0])
TY = numpy.array([0, 1])
TXY = numpy.array([2, 3])


TRANSFORM_KNOWN_VALUES = [
    (
        RigidTransform,
        numpy.array([(1, 0), (0, 1)]),
        dict(rotation=0),
        [
            (T0, [(0, 0), (1, 0), (0, 1)]),
            (TX, [(1, 0), (2, 0), (1, 1)]),
            (TY, [(0, 1), (1, 1), (0, 2)]),
            (-TX, [(-1, 0), (0, 0), (-1, 1)]),
            (-TY, [(0, -1), (1, -1), (0, 0)]),
            (TXY, [(2, 3), (3, 3), (2, 4)]),
        ],
    ),
    (
        RigidTransform,
        numpy.array([(0, 1), (-1, 0)]),
        dict(rotation=numpy.deg2rad(-90)),
        [
            (T0, [(0, 0), (0, -1), (1, 0)]),
            (TX, [(1, 0), (1, -1), (2, 0)]),
            (TY, [(0, 1), (0, 0), (1, 1)]),
            (-TX, [(-1, 0), (-1, -1), (0, 0)]),
            (-TY, [(0, -1), (0, -2), (1, -1)]),
            (TXY, [(2, 3), (2, 2), (3, 3)]),
        ],
    ),
    (
        RigidTransform,
        numpy.array([(0, -1), (1, 0)]),
        dict(rotation=numpy.deg2rad(90)),
        [
            (T0, [(0, 0), (0, 1), (-1, 0)]),
            (TX, [(1, 0), (1, 1), (0, 0)]),
            (TY, [(0, 1), (0, 2), (-1, 1)]),
            (-TX, [(-1, 0), (-1, 1), (-2, 0)]),
            (-TY, [(0, -1), (0, 0), (-1, -1)]),
            (TXY, [(2, 3), (2, 4), (1, 3)]),
        ],
    ),
    (
        RigidTransform,
        numpy.array([(-1, 0), (0, -1)]),
        dict(rotation=numpy.deg2rad(180)),
        [
            (T0, [(0, 0), (-1, 0), (0, -1)]),
            (TX, [(1, 0), (0, 0), (1, -1)]),
            (TY, [(0, 1), (-1, 1), (0, 0)]),
            (-TX, [(-1, 0), (-2, 0), (-1, -1)]),
            (-TY, [(0, -1), (-1, -1), (0, -2)]),
            (TXY, [(2, 3), (1, 3), (2, 2)]),
        ],
    ),
    (
        SimilarityTransform,
        numpy.array([(2, 0), (0, 2)]),
        dict(scale=2, rotation=0),
        [
            (T0, [(0, 0), (2, 0), (0, 2)]),
            (TX, [(1, 0), (3, 0), (1, 2)]),
            (TY, [(0, 1), (2, 1), (0, 3)]),
            (-TX, [(-1, 0), (1, 0), (-1, 2)]),
            (-TY, [(0, -1), (2, -1), (0, 1)]),
            (TXY, [(2, 3), (4, 3), (2, 5)]),
        ],
    ),
    (
        SimilarityTransform,
        numpy.array([(0, 2), (-2, 0)]),
        dict(scale=2, rotation=numpy.deg2rad(-90)),
        [
            (T0, [(0, 0), (0, -2), (2, 0)]),
            (TX, [(1, 0), (1, -2), (3, 0)]),
            (TY, [(0, 1), (0, -1), (2, 1)]),
            (-TX, [(-1, 0), (-1, -2), (1, 0)]),
            (-TY, [(0, -1), (0, -3), (2, -1)]),
            (TXY, [(2, 3), (2, 1), (4, 3)]),
        ],
    ),
    (
        SimilarityTransform,
        numpy.array([(0, -2), (2, 0)]),
        dict(scale=2, rotation=numpy.deg2rad(90)),
        [
            (T0, [(0, 0), (0, 2), (-2, 0)]),
            (TX, [(1, 0), (1, 2), (-1, 0)]),
            (TY, [(0, 1), (0, 3), (-2, 1)]),
            (-TX, [(-1, 0), (-1, 2), (-3, 0)]),
            (-TY, [(0, -1), (0, 1), (-2, -1)]),
            (TXY, [(2, 3), (2, 5), (0, 3)]),
        ],
    ),
    (
        SimilarityTransform,
        numpy.array([(-2, 0), (0, -2)]),
        dict(scale=2, rotation=numpy.deg2rad(180)),
        [
            (T0, [(0, 0), (-2, 0), (0, -2)]),
            (TX, [(1, 0), (-1, 0), (1, -2)]),
            (TY, [(0, 1), (-2, 1), (0, -1)]),
            (-TX, [(-1, 0), (-3, 0), (-1, -2)]),
            (-TY, [(0, -1), (-2, -1), (0, -3)]),
            (TXY, [(2, 3), (0, 3), (2, 1)]),
        ],
    ),
    (
        SimilarityTransform,
        numpy.array([(1, -1), (1, 1)]),
        dict(scale=numpy.sqrt(2), rotation=numpy.deg2rad(45)),
        [
            (T0, [(0, 0), (1, 1), (-1, 1)]),
            (TX, [(1, 0), (2, 1), (0, 1)]),
            (TY, [(0, 1), (1, 2), (-1, 2)]),
            (-TX, [(-1, 0), (0, 1), (-2, 1)]),
            (-TY, [(0, -1), (1, 0), (-1, 0)]),
            (TXY, [(2, 3), (3, 4), (1, 4)]),
        ],
    ),
    (
        ScalingTransform,
        numpy.array([(4, 0), (0, 1)]),
        dict(scale=2, rotation=0, squeeze=2),
        [
            (T0, [(0, 0), (4, 0), (0, 1)]),
            (TX, [(1, 0), (5, 0), (1, 1)]),
            (TY, [(0, 1), (4, 1), (0, 2)]),
            (-TX, [(-1, 0), (3, 0), (-1, 1)]),
            (-TY, [(0, -1), (4, -1), (0, 0)]),
            (TXY, [(2, 3), (6, 3), (2, 4)]),
        ],
    ),
    (
        ScalingTransform,
        numpy.array([(0, 1), (-4, 0)]),
        dict(scale=2, rotation=numpy.deg2rad(-90), squeeze=2),
        [
            (T0, [(0, 0), (0, -4), (1, 0)]),
            (TX, [(1, 0), (1, -4), (2, 0)]),
            (TY, [(0, 1), (0, -3), (1, 1)]),
            (-TX, [(-1, 0), (-1, -4), (0, 0)]),
            (-TY, [(0, -1), (0, -5), (1, -1)]),
            (TXY, [(2, 3), (2, -1), (3, 3)]),
        ],
    ),
    (
        ScalingTransform,
        numpy.array([(0, -1), (4, 0)]),
        dict(scale=2, rotation=numpy.deg2rad(90), squeeze=2),
        [
            (T0, [(0, 0), (0, 4), (-1, 0)]),
            (TX, [(1, 0), (1, 4), (0, 0)]),
            (TY, [(0, 1), (0, 5), (-1, 1)]),
            (-TX, [(-1, 0), (-1, 4), (-2, 0)]),
            (-TY, [(0, -1), (0, 3), (-1, -1)]),
            (TXY, [(2, 3), (2, 7), (1, 3)]),
        ],
    ),
    (
        ScalingTransform,
        numpy.array([(-4, 0), (0, -1)]),
        dict(scale=2, rotation=numpy.deg2rad(180), squeeze=2),
        [
            (T0, [(0, 0), (-4, 0), (0, -1)]),
            (TX, [(1, 0), (-3, 0), (1, -1)]),
            (TY, [(0, 1), (-4, 1), (0, 0)]),
            (-TX, [(-1, 0), (-5, 0), (-1, -1)]),
            (-TY, [(0, -1), (-4, -1), (0, -2)]),
            (TXY, [(2, 3), (-2, 3), (2, 2)]),
        ],
    ),
    (
        ScalingTransform,
        numpy.array([(4, -1), (4, 1)]),
        dict(scale=numpy.sqrt(8), rotation=numpy.deg2rad(45), squeeze=2),
        [
            (T0, [(0, 0), (4, 4), (-1, 1)]),
            (TX, [(1, 0), (5, 4), (0, 1)]),
            (TY, [(0, 1), (4, 5), (-1, 2)]),
            (-TX, [(-1, 0), (3, 4), (-2, 1)]),
            (-TY, [(0, -1), (4, 3), (-1, 0)]),
            (TXY, [(2, 3), (6, 7), (1, 4)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(1, 1), (1, 2)]),
        dict(scale=1, rotation=0, squeeze=1, shear=1),
        [
            (T0, [(0, 0), (1, 1), (1, 2)]),
            (TX, [(1, 0), (2, 1), (2, 2)]),
            (TY, [(0, 1), (1, 2), (1, 3)]),
            (-TX, [(-1, 0), (0, 1), (0, 2)]),
            (-TY, [(0, -1), (1, 0), (1, 1)]),
            (TXY, [(2, 3), (3, 4), (3, 5)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(1, 2), (-1, -1)]),
        dict(scale=1, rotation=numpy.deg2rad(-90), squeeze=1, shear=1),
        [
            (T0, [(0, 0), (1, -1), (2, -1)]),
            (TX, [(1, 0), (2, -1), (3, -1)]),
            (TY, [(0, 1), (1, 0), (2, 0)]),
            (-TX, [(-1, 0), (0, -1), (1, -1)]),
            (-TY, [(0, -1), (1, -2), (2, -2)]),
            (TXY, [(2, 3), (3, 2), (4, 2)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(-1, -2), (1, 1)]),
        dict(scale=1, rotation=numpy.deg2rad(90), squeeze=1, shear=1),
        [
            (T0, [(0, 0), (-1, 1), (-2, 1)]),
            (TX, [(1, 0), (0, 1), (-1, 1)]),
            (TY, [(0, 1), (-1, 2), (-2, 2)]),
            (-TX, [(-1, 0), (-2, 1), (-3, 1)]),
            (-TY, [(0, -1), (-1, 0), (-2, 0)]),
            (TXY, [(2, 3), (1, 4), (0, 4)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(-1, -1), (-1, -2)]),
        dict(scale=1, rotation=numpy.deg2rad(180), squeeze=1, shear=1),
        [
            (T0, [(0, 0), (-1, -1), (-1, -2)]),
            (TX, [(1, 0), (0, -1), (0, -2)]),
            (TY, [(0, 1), (-1, 0), (-1, -1)]),
            (-TX, [(-1, 0), (-2, -1), (-2, -2)]),
            (-TY, [(0, -1), (-1, -2), (-1, -3)]),
            (TXY, [(2, 3), (1, 2), (1, 1)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(2, 2), (2, 4)]),
        dict(scale=2, rotation=0, squeeze=1, shear=1),
        [
            (T0, [(0, 0), (2, 2), (2, 4)]),
            (TX, [(1, 0), (3, 2), (3, 4)]),
            (TY, [(0, 1), (2, 3), (2, 5)]),
            (-TX, [(-1, 0), (1, 2), (1, 4)]),
            (-TY, [(0, -1), (2, 1), (2, 3)]),
            (TXY, [(2, 3), (4, 5), (4, 7)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(2, 4), (-2, -2)]),
        dict(scale=2, rotation=numpy.deg2rad(-90), squeeze=1, shear=1),
        [
            (T0, [(0, 0), (2, -2), (4, -2)]),
            (TX, [(1, 0), (3, -2), (5, -2)]),
            (TY, [(0, 1), (2, -1), (4, -1)]),
            (-TX, [(-1, 0), (1, -2), (3, -2)]),
            (-TY, [(0, -1), (2, -3), (4, -3)]),
            (TXY, [(2, 3), (4, 1), (6, 1)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(-2, -4), (2, 2)]),
        dict(scale=2, rotation=numpy.deg2rad(90), squeeze=1, shear=1),
        [
            (T0, [(0, 0), (-2, 2), (-4, 2)]),
            (TX, [(1, 0), (-1, 2), (-3, 2)]),
            (TY, [(0, 1), (-2, 3), (-4, 3)]),
            (-TX, [(-1, 0), (-3, 2), (-5, 2)]),
            (-TY, [(0, -1), (-2, 1), (-4, 1)]),
            (TXY, [(2, 3), (0, 5), (-2, 5)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(-2, -2), (-2, -4)]),
        dict(scale=2, rotation=numpy.deg2rad(180), squeeze=1, shear=1),
        [
            (T0, [(0, 0), (-2, -2), (-2, -4)]),
            (TX, [(1, 0), (-1, -2), (-1, -4)]),
            (TY, [(0, 1), (-2, -1), (-2, -3)]),
            (-TX, [(-1, 0), (-3, -2), (-3, -4)]),
            (-TY, [(0, -1), (-2, -3), (-2, -5)]),
            (TXY, [(2, 3), (0, 1), (0, -1)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(0, -1), (2, 3)]),
        dict(scale=numpy.sqrt(2), rotation=numpy.deg2rad(45), squeeze=1, shear=1),
        [
            (T0, [(0, 0), (0, 2), (-1, 3)]),
            (TX, [(1, 0), (1, 2), (0, 3)]),
            (TY, [(0, 1), (0, 3), (-1, 4)]),
            (-TX, [(-1, 0), (-1, 2), (-2, 3)]),
            (-TY, [(0, -1), (0, 1), (-1, 2)]),
            (TXY, [(2, 3), (2, 5), (1, 6)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(4, 4), (4, 5)]),
        dict(scale=2, rotation=0, squeeze=2, shear=1),
        [
            (T0, [(0, 0), (4, 4), (4, 5)]),
            (TX, [(1, 0), (5, 4), (5, 5)]),
            (TY, [(0, 1), (4, 5), (4, 6)]),
            (-TX, [(-1, 0), (3, 4), (3, 5)]),
            (-TY, [(0, -1), (4, 3), (4, 4)]),
            (TXY, [(2, 3), (6, 7), (6, 8)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(4, 5), (-4, -4)]),
        dict(scale=2, rotation=numpy.deg2rad(-90), squeeze=2, shear=1),
        [
            (T0, [(0, 0), (4, -4), (5, -4)]),
            (TX, [(1, 0), (5, -4), (6, -4)]),
            (TY, [(0, 1), (4, -3), (5, -3)]),
            (-TX, [(-1, 0), (3, -4), (4, -4)]),
            (-TY, [(0, -1), (4, -5), (5, -5)]),
            (TXY, [(2, 3), (6, -1), (7, -1)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(-4, -5), (4, 4)]),
        dict(scale=2, rotation=numpy.deg2rad(90), squeeze=2, shear=1),
        [
            (T0, [(0, 0), (-4, 4), (-5, 4)]),
            (TX, [(1, 0), (-3, 4), (-4, 4)]),
            (TY, [(0, 1), (-4, 5), (-5, 5)]),
            (-TX, [(-1, 0), (-5, 4), (-6, 4)]),
            (-TY, [(0, -1), (-4, 3), (-5, 3)]),
            (TXY, [(2, 3), (-2, 7), (-3, 7)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(-4, -4), (-4, -5)]),
        dict(scale=2, rotation=numpy.deg2rad(180), squeeze=2, shear=1),
        [
            (T0, [(0, 0), (-4, -4), (-4, -5)]),
            (TX, [(1, 0), (-3, -4), (-3, -5)]),
            (TY, [(0, 1), (-4, -3), (-4, -4)]),
            (-TX, [(-1, 0), (-5, -4), (-5, -5)]),
            (-TY, [(0, -1), (-4, -5), (-4, -6)]),
            (TXY, [(2, 3), (-2, -1), (-2, -2)]),
        ],
    ),
    (
        AffineTransform,
        numpy.array([(0, -1), (8, 9)]),
        dict(scale=numpy.sqrt(8), rotation=numpy.deg2rad(45), squeeze=2, shear=1),
        [
            (T0, [(0, 0), (0, 8), (-1, 9)]),
            (TX, [(1, 0), (1, 8), (0, 9)]),
            (TY, [(0, 1), (0, 9), (-1, 10)]),
            (-TX, [(-1, 0), (-1, 8), (-2, 9)]),
            (-TY, [(0, -1), (0, 7), (-1, 8)]),
            (TXY, [(2, 3), (2, 11), (1, 12)]),
        ],
    ),
]


def transform_known_values():
    src = None
    for cls, matrix, params, rows in TRANSFORM_KNOWN_VALUES:
        for translation, dst in rows:
            if src is None:
                src = dst
            yield cls, matrix, translation, params, src, dst
