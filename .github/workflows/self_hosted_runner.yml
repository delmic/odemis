name: Self Hosted Runner Ubuntu 18 and 20 Unit Testing

on:
  schedule:
    - cron: "0 17 * * 0-4"  # sunday to thursday at 5 pm UTC, for Amsterdam it is +1 UTC during winter and +2 UTC during summer

jobs:
  full_test:
    runs-on: [self-hosted, Linux]
    # strategy.matrix total timeout of 20 hours
    timeout-minutes: 1200
    strategy:
      matrix:
        vm_name: ["Odemis Testing 18", "Odemis Testing 20"]
    steps:
    - name: List of all VMs
      run: VBoxManage list vms

    - name: List of running VMs
      run: VBoxManage list runningvms

    - name: Stop VM in case its running
      env:
        VM_NAME: ${{ matrix.vm_name }}
      run: |
        VBoxManage controlvm "$VM_NAME" acpipowerbutton
        exit_status=$?
        if [ $exit_status -eq 0 ]; then sleep 10s; fi
      continue-on-error: true

    - name: Start VM and execute test-cases inside VM
      env:
        # See in GitHub Settings/Security sidebar/Secrets and variables/Actions/Secrets tab/Repository secrets
        CI_VM_PASSWORD: ${{ secrets.CI_VM_PASSWORD }}
        VM_NAME: ${{ matrix.vm_name }}
      # The testing user should automatically be logged in for the display (or the xserver) to be started
      # Create a display server implementing the X11 display server protocol using Xvfb
      # Sleep for 5s to give Xvfb some time to start
      # Pass the created DISPLAY to the Virtual Machine while starting it
      # Sleep for 1.5m to give the Virtual Machine time to start and automatically login
      # Set runpytest_wrapper.sh execution timeout of 8 hours, i.e. 8 * 60 * 60 * 1000 = 28800000 milliseconds
      run: |
        export DISPLAY=:1
        Xvfb "$DISPLAY" -screen 0 1920x1280x24 > /dev/null 2>&1 &
        XVFB_PID=$!
        echo "Started Xvfb with PID $XVFB_PID"
        echo "XVFB_PID=$XVFB_PID" >> "$GITHUB_ENV"
        sleep 5s
        VBoxManage startvm "$VM_NAME" --putenv "DISPLAY=:1"
        sleep 1.5m
        VBoxManage --nologo guestcontrol "$VM_NAME" run --exe "/home/testing/development/odemis-testing/runpytest_wrapper.sh" --putenv "DISPLAY=:0" --username testing --password "$CI_VM_PASSWORD" --wait-stdout --timeout 28800000
      continue-on-error: true

    - name: Summary
      env:
        CI_VM_PASSWORD: ${{ secrets.CI_VM_PASSWORD }}
        VM_NAME: ${{ matrix.vm_name }}
      run: VBoxManage --nologo guestcontrol "$VM_NAME" run --exe "/bin/bash" --username testing --password "$CI_VM_PASSWORD" --wait-stdout -- bash -c 'cat $(ls -Art /home/testing/development/odemis-testing/pytest-summary-*.log | tail -n 1)'

    - name: Full report
      env:
        CI_VM_PASSWORD: ${{ secrets.CI_VM_PASSWORD }}
        VM_NAME: ${{ matrix.vm_name }}
      run: VBoxManage --nologo guestcontrol "$VM_NAME" run --exe "/bin/bash" --username testing --password "$CI_VM_PASSWORD" --wait-stdout -- bash -c 'cat $(ls -Art /home/testing/development/odemis-testing/unittest-full-*.log | tail -n 1)'

    - name: Stop VM
      env:
        VM_NAME: ${{ matrix.vm_name }}
        XVFB_PID: ${{ env.XVFB_PID }}
      run: |
        VBoxManage controlvm "$VM_NAME" acpipowerbutton
        sleep 10s
        echo "Killing Xvfb with PID $XVFB_PID"
        kill -9 $XVFB_PID
