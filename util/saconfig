#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
Created on June 18 2020

@author: Anders Muskens
Copyright Â© 2020 Anders Muskens, Delmic

This is a script that allows you to change the referencing mode on the Smaract 3DOF stage, and run a reference move. 

This file is part of Odemis.

Odemis is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License version 2 as published by the Free Software
Foundation.

Odemis is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
Odemis. If not, see http://www.gnu.org/licenses/.
'''

import argparse
import logging
import sys
import time

from odemis.driver import smaract

CONFIG_3DOF = {
    "name": "3DOF",
    "role": "stage",
    "ref_on_init": False,
    "speed": 0.1,
    "accel": 0.001,
    "hold_time": 1.0,
}


def calibrate(dev, channels):
    """
    Set calibration option bits to calibration_options. See section 2.7.1 in programmer manual
    0 is for a default calibration
    This property is volatile (it is reset after reboot)
    """

    if not channels:
        return

    """
    The following flags can be used here:
    smaract.SA_CTLDLL.SA_CTL_CALIB_OPT_BIT_DIRECTION
    smaract.SA_CTLDLL.SA_CTL_CALIB_OPT_BIT_DIST_CODE_INV_DETECT
    smaract.SA_CTLDLL.SA_CTL_CALIB_OPT_BIT_ASC_CALIBRATION
    smaract.SA_CTLDLL.SA_CTL_CALIB_OPT_BIT_REF_MARK_TEST
    smaract.SA_CTLDLL.SA_CTL_CALIB_OPT_BIT_LIMITED_TRAVEL_RANGE
    """
    calibration_options = 0

    for channel in channels:
        logging.info("Calibrating channel %d", channel)
        # set calibration options
        dev.SetProperty_i32(smaract.SA_CTLDLL.SA_CTL_PKEY_CALIBRATION_OPTIONS,
                            channel, calibration_options)

        dev.Calibrate(channel)


DISTANCE_CODED_MARK_POSITIONER = 304

def set_positioner_type(dev, channels, ptype):
    """
    Set the type of positioner that is connected to the device channels. The positioner type implicitly gives the
    controller information about how to calculate positions, handle the referencing, configure the control-loop,
    etc. See sections 2.5 and 4.4.6 in programmer manual.
    This property is not volatile (it will stay after reboot)
    """
    if not channels:
        return
    for channel in channels:
        logging.info(f"Setting positioner type for channel {channel} to {ptype}.")
        dev.SetProperty_i32(smaract.SA_CTLDLL.SA_CTL_PKEY_POSITIONER_TYPE, channel,
                            ptype)


def set_reference_autozero(dev, channel, autozero):
    """
    This property is volatile (it is reset after reboot)
    """
    logging.info(f"Setting the reference autozero mode to {autozero} for channel {channel}")
    ref_opt = dev.GetProperty_i32(smaract.SA_CTLDLL.SA_CTL_PKEY_REFERENCING_OPTIONS, channel)
    if autozero:
        ref_opt |= smaract.SA_CTLDLL.SA_CTL_REF_OPT_BIT_AUTO_ZERO
    else:
        ref_opt &= ~smaract.SA_CTLDLL.SA_CTL_REF_OPT_BIT_AUTO_ZERO

    dev.SetProperty_i32(smaract.SA_CTLDLL.SA_CTL_PKEY_REFERENCING_OPTIONS,
                        channel, ref_opt)

def reference(dev, channels, autozero=False):
    for channel in channels:
        set_reference_autozero(dev, channel, autozero)
    # Run the referencing
    logging.info("Starting reference...")
    try:
        dev.reference(axes=set(str(ch) for ch in channels)).result()
        time.sleep(0.1)
        logging.info("Referencing complete.")
    finally:
        # Always set reference to normal after referencing
        for channel in channels:
            set_reference_autozero(dev, channel, False)


def set_zero(dev, channels):
    """
    Set current position directly to zero, automatically adjusting the logical scale offset.
    """
    if not channels:
        return

    logging.info(
        f"Setting current position: {dev.position.value} to 0. This automatically adjusts the logical scale offset.")
    for channel in channels:
        dev.SetProperty_i64(smaract.SA_CTLDLL.SA_CTL_PKEY_POSITION, channel, 0)

    dev._updatePosition()
    logging.info("New position: %s", dev.position.value)
    logging.info("Complete.")


def main(args):
    parser = argparse.ArgumentParser(prog="saconfig",
                                     description='Run a one time config for the SmarAct ')

    parser.add_argument('--locator', required=True, type=str,
                        help='Specify the locator string for the device. e.g. "network:sn:MCS2-00001601" or "fake" for simulator',
                        action="store")

    parser.add_argument("--log-level", dest="loglev", metavar="<level>", type=int,
                        default=1, help="set verbosity level (0-2, default = 1)")

    parser.add_argument('--calibrate', metavar='N', type=int, nargs='+', default=[],
                        help="Run the calibration command. Specify the channel to calibrate (0, 1, 2)")

    parser.add_argument('--postype', metavar='N', type=int, nargs='+', default=[],
                        help="Set positioner type to distance coded mark. Specify the channel to change (0, 1, 2)")

    parser.add_argument('--autozero', metavar='N', type=int, nargs='+', default=[],
                        help="Run referencing with autozero reference mode. Specify the channel to calibrate (0, 1, 2)")

    parser.add_argument('--reference', metavar='N', type=int, nargs='+', default=[],
                        help="Run referencing with normal reference mode. Specify the channel to calibrate (0, 1, 2)")

    parser.add_argument('--setzero', metavar='N', type=int, nargs='+', default=[],
                        help="Force the current position on a channel to be 0. Specify the channel to calibrate (0, 1, 2)")

    options = parser.parse_args(args[1:])

    # Set up logging before everything else
    if options.loglev < 0:
        logging.error("Log-level must be positive.")
        return 127
    loglev_names = (logging.WARNING, logging.INFO, logging.DEBUG)
    loglev = loglev_names[min(len(loglev_names) - 1, options.loglev)]
    logging.getLogger().setLevel(loglev)

    locator = options.locator
    channels = set(options.calibrate + options.autozero + options.reference + options.setzero + options.postype)
    axes = {str(c): {"range": [-1, 1], "unit": "m", "channel": c} for c in channels}

    dev = smaract.MCS2(locator=locator, axes=axes, **CONFIG_3DOF)

    if options.calibrate:
        calibrate(dev, options.calibrate)
    elif options.postype:
        set_positioner_type(dev, options.postype, DISTANCE_CODED_MARK_POSITIONER)
    elif options.autozero:
        reference(dev, options.autozero, autozero=True)
    elif options.reference:
        reference(dev, options.reference)
    elif options.setzero:
        set_zero(dev, options.setzero)

    logging.info("Completed all operations.")


if __name__ == '__main__':
    ret = main(sys.argv)
    exit(ret)
